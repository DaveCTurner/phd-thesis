\chapter{Conclusion}
\label{conclusion}


\section{Related and Future Work}
\label{futurework}

\subsection{Full Abstraction}

The path semantics of (classical) HOPLA was shown to be fully
abstract\cite{nygaardwinskel1} by an argument which demonstrated inductively
that all paths could be defined and distinguished by terms of the language.
%
Initial suggestions towards a similar full abstraction theorem by Staton and
Winskel (in personal correspondence\cite{staton:full-abstraction-counterexample,
staton:intersection-opsem-failure, winskel:full-abstraction-fix}) has so far not
yielded a positive result.
%
As it stands it would appear that every path may be defined by a term of the
language but they cannot all be distinguished.
%
For example, it is suggested that it is impossible for a Nominal HOPLA term to
tell apart the paths $P \defeq \finelt{\{a\}}{\varnothing}$ and $P_b \defeq
\finelt{\{a\}}{\{b\}}$ (where $a \neq b$) unless it has $b$ in its support.
%
Since terms are always finitely-supported it follows that it is not possible to
construct a term $t$ which distinguishes $P$ from all other paths: for any
candidate $t$ there exists a name $b \freshfor t$ which means that $t$ cannot
tell the difference between $P$ and $P_b$.

More precisely, the argument is to write $\tilde{\mathbb A} \defeq
\typesum{a}{\mathbb A}{\typelift\typeO}$ and let \begin{equation}
\begin{array}[t]{rcl} u_a &\defeq& \ndsum{b \neq a}{\mathbb A}
{\linj{b}{\bang{\inactive}}} \text{ for each $a \in \mathbb A$,} \\ v &\defeq&
\ndsum{b}{\mathbb A}{\linj{b}{\bang{\inactive}}}, \\ t_1 &\defeq&
\ndsum{a}{\mathbb A}{\apply{\termvar{x}}{u_a}{\tilde{\mathbb A}}} \text{ and} \\
t_2 &\defeq& \apply{\termvar{x}}{v}{\tilde{\mathbb A}} \mathop{\mathtt{+}}
\ndsum{a}{\mathbb A}{\apply{\termvar{x}}{u_a}{\tilde{\mathbb A}}}. \\
\end{array} \end{equation}
%
It is clear that it is possible to derive the following typing judgements.
%
\begin{equation} \begin{array}[t]{ccc} \tjudge{}{}{u_a}{\tilde{\mathbb A}}
&\qquad& \tjudge{}{\envvar{x}{\tilde{\mathbb A} \to
\typelift\typeO}}{t_1}{\typelift\typeO} \\ \tjudge{}{}{v}{\tilde{\mathbb A}} &&
\tjudge{}{\envvar{x}{\tilde{\mathbb A} \to
\typelift\typeO}}{t_2}{\typelift\typeO} \\ \end{array} \end{equation}
%
It is claimed that $t_1$ and $t_2$ are contextually equivalent: there is no
context $C[-]$ such that the terms $\tjudge{}{}{C[t_1]}{\typelift\typeO}$ and
$\tjudge{}{}{C[t_2]}{\typelift\typeO}$ behave differently.
%
However the function space $\tilde{\mathbb A} \to \typelift\typeO$ is isomorphic
to $\mathbb A \to \{\ast\}$ and therefore to $\widehat{\typelift{\mathbb
A}^{\mathrm{op}}}$ by \ref{cts:homsets} and under this isomorphism the element
$\{ \mathbb A \}_{\downarrow} \in \widehat{\typelift{\mathbb A}^{\mathrm{op}}}$
corresponds to an element $d \in \tilde{\mathbb A} \to \typelift\typeO$ such
that $\sem{t_1}d = \varnothing$ and $\sem{t_2}d = \{\varnothing\}$ so that
$\sem{t_1} \neq \sem{t_2}$.
%
It follows that $d$ is not definable in Nominal HOPLA, and importantly that
contextual equivalence does not coincide with denotational equivalence.

In general it is not computationally unreasonable to want to distinguish the
paths $P_1 \defeq \finelt{F_1}{s_1}$ and $P_2 \defeq \finelt{F_2}{s_2}$ of type
$\typelift\typeP$.
%
To see this, notice that $s_1 \cup s_2$ supports both $P_1$ and $P_2$ so that by
lemma \ref{finelt:wlog} there exist finite $F'_1$ and $F'_2$ such that $P_1 =
\finelt{F'_1}{s_1 \cup s_2}$ and $P_2 = \finelt{F'_2}{s_1 \cup s_2}$.
%
Distinguishing $P_1$ and $P_2$ therefore boils down to comparing the finite sets
$F'_1$ and $F'_2$.

Turning to the possibility of defining a distinguishing term, notice that
\begin{equation} \begin{array}[t]{rcl} \finelt{F}{s} \subseteq x
%
& \Leftrightarrow & \forall \pi \freshfor s.\ \pi \cdot F \subseteq x \\
%
& \Leftrightarrow & \forall \pi \freshfor s.\ F \subseteq \pi \cdot x \\
%
& \Leftrightarrow & F \subseteq \bigcap_{\pi \freshfor s} \pi \cdot x
\end{array} \end{equation} which suggests that if $t$ is a term then it might be
worth defining a term $\intersect{t}{s}$ whose denotational semantics is given
by \begin{equation} \label{densem:intersect} \sem{\intersect{t}{s}} \langle
\gamma \rangle_{\Gamma} \defeq \bigcap_{\pi \freshfor s} \pi \cdot \sem{t}
\langle \gamma \rangle_{\Gamma}.  \end{equation}
%
The proof that HOPLA was fully abstract constructed for each path $p$ a
`producer' term $t_p$ and a `consumer' context $C_p[-]$ and it seems that that
the same proof works for Nominal HOPLA extended by terms of the form
$\intersect{t}{s}$.
%
The key alteration to the proof would be to define the `consumer' of the path
$\finelt{\{p_1, \ldots, p_n\}}{s}$ to be a context such as \begin{equation}
\matchz{\varnothing}{C_{p_1}[\intersect{-}{s}]}{\bangaction}{$\termvar{x}_1$}{
\ldots
\matchz{\varnothing}{C_{p_n}[\intersect{-}{s}]}{\bangaction}{$\termvar{x}_n$}{
\bang{\inactive} }{\typeP} \ldots }{\typeP} \end{equation} although such a guess
is not immediately obviously well-defined.

The denotational semantics given in \ref{densem:intersect} suggests an
operational rule such as \begin{equation} \label{opsem:intersect}
\infer{\ajudge{\typeP}{\intersect{t}{s}}{p}{t'}} {\ajudge{\typeP}{\pi \cdot
t}{p}{t'} \text{ for all $\pi \freshfor s$}} \end{equation}
%
By an argument similar to that of \ref{finelt:wlog} using the footprint lemma
(lemma \ref{footprint}) it can be shown that this rule is effectively finitary:
only finitely many $\pi \freshfor s$ must be checked before it is clear that the
premise holds.
%
Unfortunately this operational rule might break the adequacy result presented
above: the term \begin{equation} t \defeq u_a \mathop{\mathtt{+}}
\linj{a}{\bang{(\inactive \mathop{\mathtt{+}} \inactive)}} \end{equation} has
$\sem{t} = \mathbb A$ and hence $\sem{\intersect{t}{\varnothing}} = \mathbb A$
too.
%
If the semantics were adequate, it would follow that for each $c \neq a$ it
should be that $\ajudge{\tilde{\mathbb
A}}{\intersect{t}{\varnothing}}{\labelaction{c}{\bangaction}}{\inactive}$;
however $\ajudge{\tilde{\mathbb A}}{(ac) \cdot
t}{\labelaction{c}{\bangaction}}{t'}$ implies that $t' = \inactive
\mathop{\mathtt{+}} \inactive$ which is a contradiction.

It is not clear at this time how best to proceed to solve these discrepancies
between the denotational and operational semantics.
%
The full abstraction result for HOPLA gave rise to a characteristic modal logic
for the language, and it is hoped that a similar result for Nominal HOPLA may
suggest a similar characteristic \textit{nominal} modal logic.


\subsection{New HOPLA}

The language new-HOPLA of Zappa Nardelli and Winskel\cite{WZ04} was motivated by
a similar idea to that of Nominal HOPLA: namely to design the language around
universal constructions in a categorical setting that supported a notion of name
generation.
%
As such, the languages have very similar operational semantics; the major
difference is that new-HOPLA's judgements are indexed by a `current' set of
names whereas that information is unnecessary in the operational semantics of
Nominal HOPLA.
%
Because of this, much of the work on the expressivity of new-HOPLA should apply
to Nominal HOPLA too.
%
In particular it is believed that Nominal HOPLA can encode rich process calculi
with name-generation such as the $\pi$-calculus, although this avenue of
research has not yet been explored.
%
Similarly, it would be interesting to check that the results about operational
equivalences in new-HOPLA --- such as that bisimilarity is a
congruence\cite{FZN-thesis} --- also apply to Nominal HOPLA.

Attempts have been made to equip new-HOPLA with a denotational semantics by
making use of the functor category $\mathbf{Lin}^{\mathbb I}$ in place of the
category $\mathbf{Lin}$ that was used for HOPLA.
%
Indeed, it is the structure of $\mathbf{Lin}^{\mathbb I}$ which motivated the
design of the operational semantics for new-HOPLA.
%
However it transpires that not all function spaces exist in
$\mathbf{Lin}^{\mathbb I}$.
%
It is possible that sufficiently many function spaces do exist in the
functor-category setting but demonstrating this has proved remarkably
delicate\cite{winskel:namegen-linearity}.
%
It is also possible that replacing $\mathbf{Lin}^{\mathbb I}$ with an
internally-constructed version of $\mathbf{Lin}$ within the presheaf topos
$\mathbf{Set}^{\mathbb I}$ would have provided a suitable setting for a
denotational semantics for new-HOPLA, but the (notationally and conceptually)
simpler setting of nominal set theory has helped to solve some of the problems
associated with the functor-category-based domain theory.
%
It would be interesting to characterise the type functors that correspond to the
types of Nominal HOPLA via the equivalence of lemma \ref{lemma:schequiv}, but
this remains an open problem.

Nominal set theory also helped to clarify a suitable ${!}$ comonad that captured
the notions of approximation and continuity for a domain theory with
name-generation.
%
In $\mathbf{Lin}^{\mathbb I}$ the ${!}$ functor was defined by \begin{equation}
(\typelift\typeP)s \defeq \{ F \mid F \subseteq_{\mathrm{fin}} \typeP s \}
\end{equation} but lemma \ref{lemma:finite:nset} demonstrates that this picks
out the internally \textit{Dedekind} finite subsets of $\typeP$ which do not
quite coincide with the internally isolated elements of $\widehat{\typeP}$ as
desired.
%
Because of this discrepancy it may be that the functor-category semantics also
has a failure of continuity much like that described in section
\ref{bindingdiscts}.



\subsection{Presheaf Semantics}

The path semantics of HOPLA was motivated as a simplified version of the
presheaf semantics of Cattani and Winskel\cite{cattani-winskel:profunctors}.
%
The presheaf setting gives a much more detailed semantics: the denotation of a
process records not only which paths it can perform, but also \textit{how} those
paths may be realised.
%
For example, the presheaf semantics distinguishes the processes
$\bang{\bang\inactive}$ and $\bang\inactive \mathop{\mathtt{+}}
\bang{\bang\inactive}$ which are not bisimilar but which are nonetheless
confounded by the path semantics.
%
The cost of this extra detail is that it is more mathematically cumbersome to
work directly with the presheaf semantics.

The development of a nominal path semantics suggests a similar approach to
adjoining name generation to the presheaf semantics by working within a nominal
setting.
%
Of course it is currently far from clear what might be meant by a `nominal
setting' for the requisite category theory.
%
Presumably it would be involve some notion of a permutation action on a category
giving rise to a notion of finitely-supported objects and arrows and equivariant
functors.
%
It might then be necessary to design what is meant by the collection
$\widehat{\mathcal{C}}$ of `nominal presheaves' on a category $\mathcal{C}$, as
well as to build an analogue of the key binding adjunction $(-) \otimes \mathbb
A \dashv \delta$.
%
Hopefully the important isomorphisms such as $\widehat{\delta\typeP} \cong
\delta\widehat{\typeP}$ (cf. lemma \ref{deltahatiso}) would also carry across to
the categorical setting.



\subsection{Nominal Domain Theory}

The domain theory presented in this dissertation is rather simple compared with
many modern domain theories, and it skirts around many of the subtleties that
concern conventional practitioners of the subject.
%
Perhaps from the viewpoint of domain theory the single most important lesson to
be drawn from this thesis is that a great deal of care is required to capture a
sensible notion of approximation in the presence of name generation, even in
this simplified setting.
%
Working within nominal set theory can help because it is sufficiently similar to
conventional set theory that many standard arguments continue to apply in the
nominal setting, so intuitions that have been developed without name generation
are still valuable in this setting.
%
It would be fascinating to develop a more general nominal domain theory,
including results on solving recursive domain equations (including those that
use a `binding' domain constructor $\delta$).
%
It is likely that this, too, would be greatly helped by the development of a
notion of nominal category theory.
%
There are many more worthwhile avenues of research to explore!

\clearpage

\section{Summary}

A simple domain theory for concurrency has been developed within the theory of
nominal sets.
%
Elements of nominal sets are mathematical objects that have an intrinsic notion
of `free name' and `bound name', so developing a theory using nominal sets has
the effect of adjoining names to the mathematics.
%
Here, processes denote the (nominal) sets of computation paths that they can
follow, and the paths may be collected together into domains that support a
Hoare or `may do' style of nondeterminism.
%
Because the processes denote nominal sets, the computation paths may mention
names, and binding and unbinding the names gives a semantics for generating a
new name as required.

The use of nominal sets mostly requires little alteration to the theory, but an
important point where it makes a difference is that the conventional
domain-theoretic notion of approximation --- by directed sets --- is not
suitable in the presence of name generation because binding a name turns out not
to preserve directed joins.
%
The remedy is to consider approximation by directed sets that are also uniformly
supported, i.e., whose elements only mention names drawn from some fixed finite
set.

The described domain theory gives rise to an expressive metalanguage, Nominal
HOPLA, based entirely on universal constructions in the model.
%
Furthermore, the domain theory suggests an operational semantics for Nominal
HOPLA which coincides closely with its denotational semantics.
%
More precisely, it is shown that the denotational semantics is a sound and
computationally adequate description of the operational semantics.

The relationship between the $\lambda$-calculus and the universal property of
cartesian-closure is remarkably powerful because of its universality: the same
machinery applies to give a notion of higher-order computation in any
cartesian-closed setting.
%
Similarly by making use of universal properties in the development of Nominal
HOPLA it should be the case that analogous constructions should work similarly
in different settings.
%
It is also possible that the universality will help to unify various different
approaches to giving a semantics to calculi that support concurrency and name
generation by providing a common framework in which comparisons can be made.





% vim: set filetype=tex foldlevel=0 cms=\%%s nowrap tw=80:
