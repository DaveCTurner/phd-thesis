\chapter{Introduction}
\label{intro}

%Scott and Strachey's domain theory\cite{stoy:domthy} provides a mathematical
%setting that unifies various approaches to understanding the semantics of
%sequential computation.
%%
%This unification helps to connect programming languages with one another and
%with the mathematical worlds of algebra, topology and logic, and moreover to
%inspire new features of programming languages, type systems, proof techniques
%and reasoning methods.

Nygaard and Winskel\cite{nygaardwinskel1} motivate the study of domain theory as
follows.
%
\begin{quotation} Denotational semantics and domain theory of Scott and Strachey
provide a \textit{global} mathematical setting for sequential computation, and
thereby place programming languages in connection with each other; connect with
the mathematical worlds of algebra, topology and logic; and inspire programming
languages, type disciplines and methods of reasoning.  \end{quotation}

Sequential computations typically receive some input, perform a calculation, and
output the result once they have finished.
%
In contrast, computation in the modern world is increasingly performed by
interconnected collections of devices, each performing parts of computations and
interacting with their neighbours and with their environment in the course of
their calculations.
%
Input may not all be received at once; output may not all be sent
simultaneously; and computations do not necessarily even have a well-defined
finish.
%
In this world of concurrent, distributed computation there is no global
mathematical model that serves to guide developments and unify different
approaches and which provides a forum for comparing innovations.
%
In particular, classical domain theory has failed to scale to the intricacy
required to properly model concurrent computation.
%
The result of this is that a wide variety of approaches to understanding
concurrency have been developed on a more-or-less \textit{ad hoc} basis.

Operational semantics --- which studies collections of operational rules that
dictate how a computation proceeds step-by-step --- is an accessible and popular
approach to studying concurrency\cite{plotkin81structural}.
%
Operational semantics is typically described syntactically, affecting the state
of a computation by altering its symbolic representation.
%
Operational descriptions often suggest a possible physical implementation of a
computation by providing a description of the local behaviour of a process.
%
Working at this low level of abstraction makes it easier to understand the
progress of a computation, but the quantity of detail can make it harder to see
the high-level situation.

On the other hand denotational semantics --- which associates a computation with
a mathematical object that captures the essence of the computation in its
mathematical properties --- starts from a much more abstract viewpoint.
%
The drawback of this approach is that the mathematics involved is often either
too coarse to be a suitable tool, or too intricate to be useful to the working
scientist.

In short, theories for concurrent computation form a disjointed landscape with
unclear relationships between different approaches.
%
Particular process calculi are optimised to different tasks, and it is sometimes
difficult to see which optimisations are valuable innovations that can be
applied elsewhere and which are specific to the calculus in question.
%
The lack of a common framework means that lessons derived from work in one area
remain isolated from other areas of study.

Work by Cattani and Winskel on a semantics given in terms of
presheaves\cite{cattani-winskel:profunctors} has the potential to provide a
common denotational framework for studying concurrency.
%
The presheaf semantics supports a rich domain theory which captures
nondeterministic branching and provides a natural notion of equivalence for
higher-order processes via bisimulation.
%
Importantly, many computational features can be captured by universal
constructions on presheaves which justifies the claim that the presheaf
semantics may provide a broadly applicable theory of concurrent computation.
%
This work also led to the development of a simpler semantics by Nygaard and
Winskel\cite{nygaardwinskel1} where presheaves are replaced by sets of
computation paths.
%
Roughly, this semantics describes \textit{whether} a process can perform a
particular path, whereas the presheaf semantics describes \textit{how} the path
can be performed.
%
The path semantics is therefore much coarser, but at the same time it is
significantly simpler and more familiar to conventional domain theorists.
%
Intuitions developed in the path semantics can sometimes be translated into
innovations in the presheaf semantics.

A topic of particular interest to modern concurrency theory is that of
\textit{names}.
%
In the $\pi$-calculus\cite{milner:picalc} names are used to identify
communication channels between processes.
%
Names may be passed from process to process to model the mobility of channels;
they may be hidden to model scope; and importantly a process may create a new
channel, complete with a unique freshly-generated name, at will.
%
The original semantics of the $\pi$-calculus was given operationally, but more
recent work has developed denotational models
too\cite{stark:picalc,fiore:picalc}.

Names also crop up in the study of syntax, in the guise of placeholders for
variables.
%
A free variable in a term may be modelled by a name.
%
Like channel names in the $\pi$-calculus it may be passed around to other parts
of a term, and hidden by a binder.
%
When performing a proof by induction over the structure of a term that contains
bound variables, it is common to unbind them and assert that they are ``chosen
to be different'' from the free variables that are already known, effectively
generating fresh new names at will.
%
This practice is normally justified by an informal assertion such as
Barendregt's Variable Convention\cite{barendregt:lambda}.

Although this is acceptable practice when human beings are manipulating syntax,
it is necessary to provide a more formal explanation to allow computers to do
the same manipulations.
%
Shinwell\cite[Section 1.1]{shinwell:phdthesis} and Gabbay\cite[Section
33]{gabbay:thesis} summarise some of the approaches that have been developed and
concentrate --- as does this discussion --- on a recently developed method based
on a non-standard set theory: the theory of nominal sets as pioneered by
Pitts\cite{PittsAM:newaas-jv}.
%
Nominal set theory captures the common manipulations applied to names, such as
binding and unbinding, in a very natural fashion and otherwise behaves much like
more familiar set theories such as ZF.
%
This is important, because dealing with names can occasionally throw up some
subtleties that might be hard to track down in a more cumbersome setting.
%
The similarity with standard set theories is also valuable because it makes it
straightforward to transfer intuitions developed in a name-free setting into the
nominal setting.

Importantly, the operations of binding and generating names in nominal set
theory are generalisations of --- rather than dependent on --- the corresponding
syntactic notions.
%
It would therefore appear plausible that nominal set theory is a suitable
setting for studying the semantic as well as syntactic uses of names, such as
for channel identifiers in the $\pi$-calculus.
%
It is this observation which motivates this thesis, the aims of which are
\begin{enumerate}
%
\item to demonstrate that the nominal set theory of Pitts \textit{et al.} can be
used to \textit{systematically} adjoin name generation to a conventional model
for concurrency, and
%
\item to demonstrate that the path-based domain theory for concurrency of
Winskel and Nygaard can be \textit{systematically} extended with name
generation.
%
\end{enumerate}

\clearpage

To help with the navigation of this document the contents of each chapter are
summarised below.

Chapter \ref{prelims} sets out the mathematical preliminaries of the discussion,
in order to fix a consistent notation and nomenclature for the rest of the
dissertation.
%
As such, it mostly consists of definitions, discussions and results that are
well-known and published elsewhere.

Chapter \ref{domthy} develops the promised domain theory for nondeterministic
processes with names.
%
Roughly speaking, this development takes the construction of the path-based
domain theory for concurrency mentioned above and follows a parallel road within
the theory of nominal sets.
%
Importantly, all of the constructions given are by means of universal
properties, which supports the claim that this work points towards a general
framework for concurrency.

The path through the dissertation diverges at this point and it is possible to
choose whether next to read chapters \ref{nomhopla} and then \ref{densem}, or
else to read chapter \ref{abstract-justification}.

Chapter \ref{nomhopla} introduces an expressive process calculus, Nominal HOPLA,
which can be used to illustrate the domain theory of chapter \ref{domthy}.
%
Nominal HOPLA is closely related to the language HOPLA (a Higher-Order Process
LAnguage)\cite{nygaardwinskel1} and is inspired by the language
new-HOPLA\cite{WZ04}.
%
The content of chapter \ref{nomhopla} requires only a little nominal set
theory and no domain theory to appreciate, since it concentrates on a syntactic
and operational description of the process calculus.

Chapter \ref{densem} links the operational semantics of chapter \ref{nomhopla}
with the domain theory of chapter \ref{domthy} by giving a denotational
semantics to Nominal HOPLA in terms of universal constructions, and then proving
soundness and adequacy results that closely link the two styles of semantics.

Chapter \ref{abstract-justification}, which depends only on chapters
\ref{prelims} and \ref{domthy}, takes a more abstract approach and develops some
categorical foundations for the domain theory of chapter \ref{domthy}, providing
support for the claim that this work is an example of a systematic procedure to
incorporate name generation into a semantic model.

Finally, chapter \ref{conclusion} discusses a number of possible future avenues
of enquiry that this thesis has made available.







% vim: set filetype=tex foldlevel=0 cms=\%%s nowrap tw=80:
