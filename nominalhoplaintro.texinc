\chapter[Nominal HOPLA: Syntax and Operational Semantics]{The Syntax and
Operational Semantics of Nominal HOPLA} \label{nomhopla} \chaptermark{Syntax and
Operational Semantics}

Nominal HOPLA is an expressive calculus for higher-order processes with
nondeterminism and name-binding which can now be used to illustrate the domain
theory of the previous chapter.
%
The development of Nominal HOPLA follows closely that of HOPLA (a Higher-Order
Process LAnguage)\cite{nygaardwinskel1} and is inspired by the language
new-HOPLA\cite{WZ04}.

Section \ref{subsect:nset:category} shows that the category $\mathbf{NSet}$ is
equivalent to the Schanuel topos $\mathbf{Sch}$ of pullback-preserving
presheaves over $\mathbb I^{\mathrm{op}}$.
%
In fact, Johnstone\cite[Examples A2.1.11(g)]{johnstone:elephant:i} comments that
$\mathbf{Sch}$ is a category of sheaves over $\mathbb I^{\mathrm{op}}$.
%
Others\cite{fiore:picalc,stark:picalc} have made sense of binding operators in a
more general functor category $[\mathbb I, \mathcal{C}]$ for some suitable
$\mathcal{C}$.
%
Note that if $\mathcal{C} = \mathbf{Set}$ then this draws attention to the
category of presheaves over $\mathbb{I}^{\mathrm{op}}$ which is different from
$\mathbf{NSet}$ in that in the presheaf setting there is no well-defined
\textit{minimal} support in general, so that supports must be treated more
explicitly than when working in $\mathbf{NSet}$.
%
Roughly speaking, HOPLA, new-HOPLA and Nominal HOPLA are related to each other
in the same way that respectively set theory, presheaves over
$\mathbb{I}^{\mathrm{op}}$ and sheaves over $\mathbb{I}^{\mathrm{op}}$ are
related: HOPLA has no names, new-HOPLA treats names explicitly in its syntax,
whereas the treatment of names in Nominal HOPLA is much more implicit.

In order to present Nominal HOPLA it is necessary to give the language an
abstract syntax, and this syntax includes some binding operators such as the
usual function abstraction $\abstract{x}{t}$ which binds free occurrences of the
variable $\termvar{x}$ in the term $t$.
%
One of the earliest applications of nominal sets\cite{PittsAM:alpsri} was to
formalise common informal arguments about syntax with binding.
%
For example, when performing a proof by induction over the syntax of a language
with binding operators, bound variables are commonly assumed to be fresh, and
this can be shown to be a valid induction principle by representing the syntax
within nominal sets, where variables are represented by names.

However, the structure of interest here is not the syntax of Nominal HOPLA but
its semantics, and the binding of variables in its syntax is a distraction.
%
To avoid confusion the binding of variables is treated in the usual informal
fashion: bound variables are always distinct from the other variables in scope,
and substitution silently avoids capturing free variables.
%
In particular, if $\termvar{x}$ is a variable and $\sigma$ is a permutation of
the set of atoms then $\sigma \cdot \termvar{x} = \termvar{x}$.

The design of Nominal HOPLA is motivated by universal constructions in the
categories $(\mathbf{FMCts}_s)_{s \subseteq_{\mathrm{fin}} \mathbb A}$, such as
their cartesian closed structure (for higher-order processes) and the adjunction
$(-)^{\freshfor a++} \dashv \delta^{++}_a$ (for names and name binding).
%
This motivation will become clear in chapter \ref{densem} which shows the
details of its denotational semantics.
%
Before that, the syntax (section \ref{syntax}), type system (section
\ref{tjudge}) and operational semantics (section \ref{opsem}) are presented.

% vim: set filetype=tex foldlevel=0 cms=\%%s nowrap tw=80:
