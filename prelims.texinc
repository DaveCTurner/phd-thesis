\chapter{Preliminaries}
\label{prelims}

This chapter sets out some of the mathematical prerequisites for the remainder
of this dissertation.
%
As such, it mostly consists of definitions, discussions and results that are
well-known and published elsewhere, but which are collected here so that it is
possible to make use of them with consistent nomenclature and notation.

Notable exceptions to this rule include lemmas \ref{footprint} and
\ref{lemma:finite:nset}, both of which are original work by the author.
%
Lemma \ref{footprint} in particular is a key insight that makes it possible to
characterise the domain-theoretic notion of \textit{isolated} elements (also known
elsewhere as a \textit{compact} or \textit{finite} elements) within the
non-standard nominal set theory, as demonstrated in lemma \ref{fineltextension}.

This chapter falls into two independent halves: section \ref{dtfc} introduces
denotational semantics and elementary domain theory, and section \ref{nsets}
introduces the theory of nominal sets.

\section{Domain Theory} \label{dtfc} \input{dtfc.texinc}

\section{Nominal Sets}
\label{nsets}

The syntactic principle of `binding' of a variable is easy to understand.
%
Every algebra student would agree that the theorems \[
\label{algthm1} \forall x. (5x+2 = 12 \Rightarrow x = 2) \quad \text{and} \quad
\forall y.  (5y+2 = 12 \Rightarrow y = 2) \] express precisely the same concept,
as the symbols $x$ and $y$ are just used to name something to which a later
reference needs to be made.
%
In some sense, it seems to be an innate ability to give something a name and
later refer to that `something' using just its name.
%
Furthermore, such a name may only make sense in a particular context.

This concept can be seen to be surprisingly subtle when working fully formally.
%
Computers (and the formal systems that they implement) have no innate ability to
deal with locally-scoped names, so this ability must be carefully implemented by
hand.
%
Over the years a variety of ways to deal with locally-scoped names have been
created.
%
Shinwell\cite[Section 1.1]{shinwell:phdthesis} and Gabbay\cite[Section
33]{gabbay:thesis} summarise some of these approaches and concentrate --- as
does this discussion --- on a recently developed method based on a non-standard
set theory: the theory of nominal sets\cite{PittsAM:newaas-jv}.
%
This theory is a powerful one in the context of this thesis because it gives a
purely semantic account of the idea of a bound name, which makes it possible to
give a natural account of a compositional denotational semantics incorporating
binding.
%
For example, the denotation of the $\pi$-calculus term $\nu a. P$ should be
built from the denotation of $P$ via some kind of binding operator: the name $a$
should appear `free' in $\sem{P}$ but must not be free in $\sem{\nu a. P}$.
%
The theory of nominal sets makes sense of the idea of a name appearing free in a
semantic object such as $\sem{P}$ in a fashion that smoothly extends the
syntactic notion of free names.
%
It also allows the construction of the kind of binding operator that takes
$\sem{P}$ to $\sem{\nu a. P}$.
%
Importantly, the internal language of the theory of nominal sets is very close
to that of standard set theory, so the development of a domain theory for
concurrency within nominal set theory is accessible to conventional domain
theorists as the name-theoretic details can be ignored when they are not
relevant.

The roots of nominal set theory lie in the study of syntax, so it is
introduced here from this viewpoint.
%
The theory rests on two key observations about names.
%
The first is that the concrete names used by any piece of syntax are not
relevant outside of their scope.
%
The second is that any piece of syntax can only explicitly mention finitely many
names.

From the first observation, the names used by any piece of syntax can be
injectively renamed to some other collection of names without changing the
underlying meaning of the syntax.
%
Unlike the collection of injective renamings, the collection of bijective
renamings forms a group, and the group structure simplifies the theory.
%
The restriction of attention to bijective renamings is not a severe constraint.
%
Also, since each piece of syntax only mentions finitely many names it is
possible to turn attention to those bijective renamings that fix all but
finitely many names.
%
A few lemmas about such bijective renamings are developed in
\ref{subsect:nset:finaut}, then \ref{subsect:nset:theory} introduces the theory
of nominal sets and \ref{subsect:nset:examples} shows some examples and
constructions for building new ones.
%
The category of nominal sets is briefly explored in \ref{subsect:nset:category}
and finally \ref{subsect:nset:binding} demonstrates how the theory can be used
to capture the idea of `binding' a name.

\subsection{Finite Automorphisms on Names}
\label{subsect:nset:finaut}

Let $\mathbb A$ be a fixed infinite set whose elements are to be called
\textit{names}.
%
The letter $\mathbb A$ is chosen as names are also known as \textit{atoms}: they
are atomic in the sense that they have no internal structure.
%
From the discussion above, the basis for the theory of nominal sets is that of a
finite automorphism of $\mathbb A$, i.e. a bijection $\sigma : \mathbb A \to
\mathbb A$ such that $\sigma a \neq a$ for only finitely many $a \in \mathbb A$.
%
In particular this includes permutations of $\mathbb A$, which are represented
as finite lists of transpositions of pairs of names $(a_1 b_1) \ldots (a_n b_n)$
and whose action is defined by recursion on $n$ by letting $\iota a \defeq a$
where $\iota$ is the empty list, and \begin{equation} (a_1 b_1) \ldots (a_n b_n)
(a_{n+1} b_{n+1}) a \defeq \begin{cases} (a_1 b_1) \ldots (a_n b_n)  b_{n+1} & a
= a_{n+1} \\ (a_1 b_1) \ldots (a_n b_n) a_{n+1} & a = b_{n+1} \\ (a_1 b_1)
\ldots (a_n b_n)  a & \text{otherwise.} \end{cases} \end{equation}

In fact, any finite automorphism may be represented as a permutation, as the
following lemma shows.

\begin{lemma} \label{lemma:automorphism:permutation} Any finite automorphism
$\sigma : \mathbb A \to \mathbb A$ may be represented as a sequence of
transpositions of pairs of names $(a_1 b_1) \ldots (a_n b_n)$ where either
$\sigma = \mathbf{1}_{\mathbb A}$ (and $n = 0$) or $n < |\{a \in \mathbb A \mid
\sigma a \neq a\}|$ and for each $i$, $\sigma a_i \neq a_i$ and $\sigma b_i \neq
b_i$.  \end{lemma}

\begin{proof} The proof proceeds by strong induction on $|\{a \in \mathbb A \mid
\sigma a \neq a\}|$.
%
If $|\{a \in \mathbb A \mid \sigma a \neq a\}| = 0$ then $\sigma =
\mathbf{1}_{\mathbb A}$.
%
Suppose that $|\{a \in \mathbb A \mid \sigma a \neq a\}| > 0$ and let $a \in
\mathbb A$ be such that $\sigma a \neq a$.
%
In order to use the induction hypothesis, it is necessary to find an
automorphism that moves strictly fewer names.
%
Letting $a' = \sigma^{-1}a$ it will now be shown that $\sigma \circ (a a')$ is
such an automorphism.
%
To see this, notice firstly that $\sigma \bigl((a a') a\bigr) = a$.
%
Furthermore, suppose that $b$ is such that $\sigma \bigl((a a') b\bigr) \neq b$,
then $\sigma b \neq b$ as follows.
%
Clearly $b \neq a$; also if $b = \sigma^{-1} a$ then $\sigma b = a \neq b$;
finally if $b \neq a'$ then $(a a') b = b$ so that $b \neq \sigma \bigl((a a')
b\bigr) = \sigma b$ as required.
%
Therefore $\{b \in \mathbb A \mid \sigma \bigl((a a') b\bigr) \neq b\}
\varsubsetneq \{a \in \mathbb A \mid \sigma a \neq a \}$ so the induction
hypothesis applies to $\sigma \circ (a a')$ to give a sequence $\vec{\tau}$ of
transpositions.
%
Note that $a' \neq a$ since $a \neq \sigma a$, so that $\vec{\tau} (a a')$ is as
desired.  \end{proof}


\subsubsection{The Footprint Lemma.}
%
The following lemma characterises permutations in terms of their footprints on a
particular set $B$ of names.
%
The intuition behind this lemma is as follows.
%
Suppose that in the course of a calculation there is a bound $B$ on the set of
names that are `known'.
%
For example, the calculation could be a reduction of a term $t$ in some context
$C$ and $B$ contains the free names of $t$, so they cannot be permuted without
affecting its context.
%
In this example, $t$ and $C$ `know' the free names.
%
Importantly, if $B$ contains all the names that are `known' by a calculation
then for the purposes of that particular calculation any names outside $B$ are
equivalent.
%
Therefore it is possible to characterise a permutation $\sigma$ in terms of its
`footprint' on $B$: the action of $\sigma$ just on the names in $B$.
%
Of course if $a \notin B$ but $\sigma a \in B$ then this is significant,
although the precise source $a$ of $\sigma a$ is not important.
%
Similarly it is significant if $b \in B$ but $\sigma b \notin B$, although the
precise destination $\sigma b$ of $b$ is not.
%
If $B$ is finite then it is possible to specify a disjoint set $D$ that
represents a canonical collection of `unknown' sources and destinations of the
elements in $B$.
%
Then from the point of view of the calculation in question the permutation
$\sigma$ may be represented as a permutation $\sigma_2$ such that
\begin{itemize}
%
\item if $b \in B$ and $\sigma b \in B$ then $\sigma_2 b = \sigma b$,
%
\item if $b \in B$ but $\sigma b \notin B$ then $\sigma_2 b \in D$, and
%
\item if $a \notin B$ but $\sigma a \in B$ then $\sigma^{-1}_2 \sigma a \in D$.
%
\end{itemize}
%
Importantly a set $D$ may be chosen that suffices for any permutation $\sigma$,
and a finite such $D$ exists, so $\sigma_2$ takes only finitely many possible
values.
%
This fact is used in the proof of \ref{fineltextension}.

Notice that this lemma generalises the result that $(be) = (de)(bd)(de)$ for
distinct names $b, d, e$.

\begin{lemma}[Footprint Lemma] \label{footprint} Let $A$, $B$ and $D$ be
mutually disjoint finite sets of names such that $|D| > |B|$. Then for all
permutations $\sigma$ such that $\sigma a = a$ for all $a \in A$ there exist
permutations $\sigma_1$, $\sigma_2$, $\sigma_3$ such that \begin{itemize} \item
$\sigma = \sigma_1 \sigma_2 \sigma_3$, and \item $\sigma_1 a = a$ and $\sigma_3
a = a$ for all $a \in A \cup B$, and \item $\sigma_2 a \neq a$ only if $a \in (B
\cup D) \setminus A$. \end{itemize} \end{lemma}

\begin{proof} Represent $\sigma$ as a finite list of transpositions of names not
in $A$ and proceed by induction on the length of the list.
%
If the list is empty then $\sigma = \iota$ and $\sigma_1 = \sigma_2 = \sigma_3 =
\iota$ is a factorisation in the desired form. On the other hand, if the list is
nonempty then write $\sigma = \sigma' (ab)$ where $a \notin A$ and $b \notin A$
and $\sigma' c = c$ for all $c \in A$. 
%
By induction there exist $\sigma_1$, $\sigma_2$ and $\sigma_3$ such that
$\sigma' = \sigma_1 \sigma_2 \sigma_3$ and $\sigma_1 c = c$ and $\sigma_3 c = c$
for all $c \in A \cup B$ and $\sigma_2 c \neq c$ only if $c \in (B \cup D)
\setminus A$.

If $a \notin B$ and $b \notin B$ then define $\sigma'_3 = \sigma_3(ab)$.  Since
$\sigma'_3 c = c$ for all $c \in A \cup B$, $\sigma = \sigma_1 \sigma_2
\sigma'_3$ is a factorisation in the desired form. 
%
If $a \in B$ and $b \in B$ then $\sigma_3(ab) = (ab)\sigma_3$ so let $\sigma'_2
= \sigma_2(ab)$ which has $\sigma'_2 c \neq c$ only if $c \in (B \cup D)
\setminus A$, so that $\sigma = \sigma_1 \sigma'_2 \sigma_3$ is a factorisation
in the desired form.

Otherwise without loss of generality let $a \notin B$ and $b \in B$. Then
$\sigma_3(ab) = (a'b)\sigma_3$ where $a' = \sigma_3 a$.
%
Note that $a' \notin A \cup B$ since otherwise $a' = \sigma_3 a'$ and hence $a'
= \sigma_3^{-1} a' = a \notin A \cup B$ which is a contradiction. There are two
cases to consider, depending on whether $a' \in D$ or not.

If $a' \in D$ then let $\sigma'_2 = \sigma_2(a'b)$.
%
Then $\sigma'_2 c \neq c$ only if $c \in (B \cup D) \setminus A$, so that
$\sigma = \sigma_1 \sigma'_2 \sigma_3$ is a factorisation in the desired form.
%
On the other hand $a' \notin D$ then let $c \in D$ be such that $\sigma_2 \cdot
c \in D$, which exists since by assumption $|D| > |B|$.
%
Then $(a'b) = (a'c)(bc)(a'c)$.
%
Writing $c' = \sigma_2 \cdot c \in D$, then $\sigma = \sigma_1 (a'c') \sigma_2
(bc) (a'c) \sigma_3$.
%
Let $\sigma'_1 = \sigma_1 (a'c')$, $\sigma'_2 = \sigma_2 (bc)$ and $\sigma'_3 =
(a'c) \sigma_3$, then $\sigma = \sigma'_1 \sigma'_2 \sigma'_3$ is a
factorisation in the desired form.
%
\end{proof}

It is sometimes useful to be able to extend an injection $i : s \rightarrowtail
\mathbb A$ into a permutation $\sigma_i : \mathbb A \to \mathbb A$.
%
This is always possible if $s$ is finite, although there is never a unique such
permutation.

\begin{lemma} \label{lemma:injextension} If $s \subseteq_{\mathrm{fin}} \mathbb
A$ and $i : s \rightarrowtail \mathbb A$ is an injection then there exists a
finite permutation $\sigma_i$ such that that the restriction of $\sigma_i$ to
$s$ is $i$.  \end{lemma}

\begin{proof} The proof proceeds by induction on $|s|$.
%
If $s = \varnothing$ then any finite permutation suffices for $\sigma_i$.
%
Now suppose that $a \notin s$ and $i : s \udot \{a\} \rightarrowtail \mathbb A$,
and let $i' = i|_s : s \rightarrowtail \mathbb A$.
%
By induction, there is a permutation $\sigma_{i'}$ extending $i'$ so define
$\sigma_i = (ia\ \sigma_{i'}a) \sigma_{i'}$.
%
It is immediate that $\sigma_i a = ia$.
%
Let $b \in s$, then $\sigma_i b = (ia\ \sigma_{i'} a) (i' b) = (ia\ \sigma_{i'}
a) (i b)$.
%
Certainly $ia \neq ib$ as $i$ is an injection, and $ib = i'b = \sigma_{i'} b$ so
that $\sigma_{i'} a \neq ib$ and hence $\sigma_i b = ib$ as required.
\end{proof}


\subsection{The Theory of Nominal Sets}
\label{subsect:nset:theory}

This section is a very short introduction to the theory of nominal sets.
%
More details and longer discussions are available elsewhere\cite{PittsAM:alpsri}.

\begin{definition} Write \define{$\mathcal G$} for the group of finite
permutations of $\mathbb A$. \end{definition}

\begin{definition} A \define{$\mathcal G$-set} is a set $X$ together with an
$\mathcal G$-action, written as the infix operator $\cdot_X$ or more commonly
simply $\cdot$ where the set $X$ is clear from the context. \end{definition}

A $\mathcal G$-set is intuitively a set whose elements `use names'.
%
The action of a particular permutation on an element $x$ of a $\mathcal G$-set
is therefore the action of permuting the names that $x$ uses.
%
A $\mathcal G$-action is enough to capture the concept of `using' names without
needing to refer to syntax as follows.

\begin{definition} A set $s \subseteq \mathbb A$ is said to \define{support} $x
\in X$ (and $x$ is said to \define{have support} $s$) if for any permutation
$\sigma$ such that $\sigma a = a$ for all $a \in s$ it is the case that $\sigma
\cdot x = x$. \end{definition}

Intuitively $s$ supports $x$ if $s$ is an upper bound for the set of names that
$x$ uses.
%
The elements of interest use only finitely many names and in this case it is
possible to find a smallest possible support.

\begin{lemma} \label{lemma:smallestsupport} If $x \in X$ has a finite support
then $\bigcap \{ s \subseteq_{\mathrm{fin}} \mathbb A \mid \text{$s$ supports
$x$} \}$ supports $x$.  \end{lemma}

\begin{proof} It is sufficient to show that if $s$ and $s'$ are finite supports
of $x$ then $s \cap s'$ also supports $x$.
%
Let $a, b \in \mathbb A \setminus (s \cap s')$ and show that $(ab) \cdot x = x$
as follows.
%
If $a, b \in \mathbb A \setminus s$ then $(ab) \cdot x = x$ since $s$ supports
$x$.
%
Similarly if $a, b \in \mathbb A \setminus s'$ then $(ab) \cdot x = x$ too.
%
Therefore without loss of generality suppose that $a \in s \setminus s'$ and $b
\in s' \setminus s$.
%
Let $c \in \mathbb A \setminus (s \cup s')$, then $(ac) \cdot x = x$ and $(bc)
\cdot x = x$, so that $(ab) \cdot x = (ac) \cdot (bc) \cdot (ac) \cdot x = x$ as
required.
%
More generally, let $\sigma$ be a permutation such that $\sigma a = a$ for all
$a \in s \cap s'$, then by lemma \ref{lemma:automorphism:permutation} $\sigma$
may be represented as a string of transpositions $(a b)$ where $a, b \notin s
\cap s'$.
%
By induction, using the argument above, $\sigma \cdot x = x$ and hence $s \cap
s'$ supports $x$ as required.  \end{proof}

\begin{definition} A $\mathcal G$-set $X$ is a \define{nominal set} if every $x
\in X$ has a finite support.  \end{definition}

\begin{definition} In the light of lemma \ref{lemma:smallestsupport} if $X$ is a
nominal set and $x \in X$ then define $\supp{x}$ to be the smallest finite
support of $x$, that is, \[\supp{x} \defeq \bigcap \{ s \subseteq_{\mathrm{fin}}
\mathbb A \mid \text{$s$ supports $x$} \}.\] \end{definition}

\begin{definition} If $X$ and $Y$ are nominal sets and $x \in X$ and $y \in Y$
then say $x$ \define{is fresh for} $y$ and write `$x \freshfor y$' iff $\supp{x}
\cap \supp{y} = \varnothing$.\end{definition}

\subsubsection{Notation.} For the remainder of this dissertation the symbol $s$
and its relatives $s'$, $s''$, $s_1$, $s_i$, etc. always refer to
\textit{finite} subsets of $\mathbb A$.

\begin{lemma}[Equivariance of support] \label{supports:eqvt} Let $X$ be a
nominal set, $x \in X$, $s \subseteq_{\mathrm{fin}} \mathbb A$ and $a, b \in
\mathbb A$. Then $s$ supports $x$ if and only if $\{(ab) \cdot c \mid c \in s\}$
supports $(ab) \cdot x$.\end{lemma}

\begin{proof} Suppose that $s$ supports $x$ and let $\sigma$ be a permutation
such that $\sigma \cdot (ab) \cdot c = (ab) \cdot c$ for all $c \in s$.
%
Therefore $(ab) \cdot \sigma \cdot (ab) \cdot c = c$ for all $c \in s$ so that
$(ab) \cdot \sigma \cdot (ab) \cdot x = x$ since $s$ supports $x$.
%
It follows that $\sigma \cdot (ab) \cdot x = (ab) \cdot x$, and as $\sigma$ was
arbitrary this shows that $\{(ab) \cdot c \mid c \in s\}$ supports $(ab) \cdot
x$.
%
The converse now follows by noting that $(ab) \cdot (ab) \cdot x = x$ and
$\{(ab) \cdot c \mid c \in \{(ab) \cdot d \mid d \in s\}\} = s$.\end{proof}

\begin{lemma} \label{supp-in-out}
%
Let $X$ be a nominal set, $x \in X$ and let $a, b \in \mathbb A$.
%
If $a \in \supp{x}$ and $b \notin \supp{x}$ then $(ab) \cdot x \neq x$.
%
\end{lemma}

\begin{proof} Let $s \subseteq_{\mathrm{fin}} \mathbb A$ be such that $s$
supports $x$ and $b \notin s$, which exists by the definition of $\supp{x}$.
%
Lemma \ref{supports:eqvt} shows that $\{(ab) \cdot c \mid c \in s\}$ supports
$(ab) \cdot x$, but $a \notin \{(ab) \cdot c \mid c \in s\}$.
%
However, since $a \in \supp{x}$ it follows that $\{(ab) \cdot c \mid c \in s\}$
cannot support $x$, so that $x \neq (ab) \cdot x$ as required.  \end{proof}

\begin{lemma} \label{supp-in-out-conv}
%
Let $X$ be a nominal set, $x \in X$, $a, b \in \mathbb A$ and suppose that $s
\subseteq_{\mathrm{fin}} \mathbb A$ supports $x$.
%
If $b \notin s$ and $(ab) \cdot x \neq x$ then $a \in \supp{x}$.
%
\end{lemma}

\begin{proof} Suppose that $a \notin \supp{x}$.
%
Since $b \notin s$ it follows that $b \notin \supp{x}$ too, but $\supp{x}$
supports $x$ so that $(ab) \cdot x = x$ which is a contradiction as required.
\end{proof}

\subsection{Constructing Nominal Sets}
\label{subsect:nset:examples}

It is worth discussing some examples of nominal sets.

\subsubsection{Discrete nominal sets.}
%
Any set may be given the trivial $\mathcal G$-action $\sigma \cdot x = x$ and
with respect to this action every element has empty support. A set with the
trivial $\mathcal G$-action is called a discrete nominal set.
%
Any finite nominal set is necessarily discrete.

\subsubsection{The set of names.}
%
The set $\mathbb A$ is a nominal set with permutation action given by $\sigma
\cdot a \defeq \sigma a$.
%
This is clearly a group action, and it is straightforward to show that every $a
\in \mathbb A$ is supported by the finite set $\{a\}$ and that $a \in \supp{a}$
by lemma \ref{supp-in-out-conv} so that $\supp{a} = \{a\}$ and hence $a
\freshfor b$ iff $a \neq b$.

\subsubsection{The set of permutations of names.}
%
The group $\mathcal G$ is a nominal set, with permutation action given by
$\sigma \cdot \sigma' \defeq \sigma \sigma' \sigma^{-1}$.
%
It is not hard to see that this is a group action.
%
Furthermore, $\supp{\sigma} = \{ a \in \mathbb A \mid \sigma a \neq a \}$ as
follows.
%
Suppose that $\sigma' a = a$ for all $a \in \mathbb A$ such that $\sigma a \neq
a$, then it is required to show that $\sigma' \cdot \sigma \defeq \sigma' \sigma
{\sigma'}^{-1} = \sigma$.
%
Let $a \in \mathbb A$ and suppose that $\sigma' a \neq a$, then ${\sigma'}^{-1}
a \neq a = \sigma' {\sigma'}^{-1} a$ so that ${\sigma'}^{-1} a = \sigma
{\sigma'}^{-1} a$.
%
Therefore $(\sigma' \cdot \sigma) a = \sigma' {\sigma'}^{-1} a = a$. Also if
$\sigma' a \neq a$ then $\sigma a = a$ so that $(\sigma' \cdot \sigma) a =
\sigma a$ as required.
%
On the other hand suppose that $\sigma' a = a$, then ${\sigma'}^{-1} a = a$ too.
%
If $\sigma a = a$ then $(\sigma' \cdot \sigma) a = a = \sigma a$, and if $\sigma
a \neq a$ then $\sigma \sigma a \neq \sigma a$ so that $\sigma' \sigma a =
\sigma a$ and hence $(\sigma' \cdot \sigma) a = a = \sigma a$ as required.
%
Therefore $\sigma$ is supported by $\{a \in \mathbb A \mid \sigma a \neq a \}$.
%
Furthermore, this is the smallest support: pick any $a$ and $b$ such that
$\sigma a \neq a$ and $\sigma b = b$ then it is certainly the case that $(ab)
\cdot \sigma \neq \sigma$ so that $a \in \supp{\sigma}$.

\subsubsection{Products and sums.}
%
If $X$ and $Y$ are nominal sets then their product $X \times Y$ and their sum $X
+ Y$ are both nominal sets, with permutation actions given componentwise. The
support of a pair $\langle x, y \rangle \in X \times Y$ is $\supp{x} \cup
\supp{y}$.

\subsubsection{Subsets.}
%
If $X$ is a nominal set and $Y \subseteq X$ is closed under the action of
$\mathcal G$ then $Y$ is also a nominal set with respect to this action.

\subsubsection{Nominal powersets.}
%
If $X$ is a nominal set then its powerset $\mathcal P X$ has a natural $\mathcal
G$-action given by \begin{equation} \sigma \cdot A \defeq \{ \sigma \cdot x \mid
x \in A \}. \end{equation}
%
However in general not every subset of $X$ has finite support with respect to
this action.
%
For example, consider some $A \subseteq \mathbb A$ which is neither finite nor
has finite complement, then this $A$ does not have a finite support with respect
to the usual $\mathcal G$-action on $\mathbb A$ defined above.
%
To see this, suppose that $A$ is supported by a set $s \subseteq \mathbb A$. If
there exists $a \in A \setminus s$ and $b \in \mathbb A \setminus (A \cup s)$
then $(ab) \cdot A \neq A$ which contradicts that $s$ supports $A$, so either $A
\setminus s = \varnothing$ or $\mathbb A \setminus (A \cup s) = \varnothing$. If
$A \setminus s = \varnothing$ then $A \subseteq s$ and hence $s$ is infinite,
whereas if $\mathbb A \setminus (A \cup s) = \varnothing$ then $A \cup s =
\mathbb A$ and hence $\mathbb A \setminus A \subseteq s$ so that $s$ is infinite
in this case as well.

However, $\mathcal P X$ does contain a nominal set, \begin{equation}
\mathcal{P}_{\mathrm{fs}}(X) \defeq \{ A \subseteq X \mid \text{$A$ has finite
support} \}. \end{equation}
%
It is not hard to see that if $A \subseteq X$ is supported by $s$ then $\sigma
\cdot A$ is supported by $\{ \sigma a \mid a \in s\} = \sigma \cdot s$ so that
$\mathcal{P}_{\mathrm{fs}} X$ does have a well-defined $\mathcal{G}$-action.
%
Notice that any finite subset of $X$ is supported by the union of the supports
of its elements (which is finite) and therefore the finite powerset $\mathcal
P_{\mathrm{fin}} X$ is also a nominal set.

\subsubsection{Nominal function spaces.}
%
If $X$ and $Y$ are nominal sets then the set of functions $X \to Y$ is a subset
of $\mathcal P(X \times Y)$, where the derived $\mathcal{G}$-action amounts to
\begin{equation} (\sigma \cdot f)x \defeq \sigma \cdot \bigl( f(\sigma^{-1}
\cdot x) \bigr). \end{equation} In general a function $f : X \to Y$ does not
have finite support: if $A \subseteq \mathbb A$ is infinite and has infinite
complement then its characteristic function $\chi_A : \mathbb A \to \mathbf{2}$
has no finite support for the same reason that $A$ has no finite support.
%
Again, $X \to Y$ does contain a nominal set, \begin{equation}
\label{def:fsfunction} X \to_{\mathrm{fs}} Y \defeq \{ f : X \to Y \mid
\text{$f$ has finite support} \}.  \end{equation}
%
It is not hard to see that if $s$ supports $f$ then $\sigma \cdot s$ supports
$\sigma \cdot f$ so that $X \to_{\mathrm{fs}} Y$ does have a well-defined
$\mathcal{G}$-action.

The remainder of this discussion barely mentions the fact that any particular
object that has been constructed --- even powersets and function spaces --- is
finitely supported.
%
This is justified by the following principle.

\begin{theorem}[Finite Support Principle, cf. {\cite[Theorem
3.5]{PittsAM:alpsri}}] \label{finitesupport} Any function or relation that is
defined from finitely supported functions and relations using higher-order,
classical logic without choice principles, is itself finitely supported.
\end{theorem}

A particularly special class of finitely-supported function consists of those
that have empty support.

\begin{definition} A function $f : X \to Y$ between nominal sets is
\define{equivariant} iff it has empty support. \end{definition}

If $f$ is equivariant then $\sigma^{-1} \cdot f = f$ so that for all $x \in X$,
$f x = (\sigma^{-1} \cdot f) x = \sigma^{-1} \cdot \bigl( f (\sigma x) \bigr)$
and hence \begin{equation} \label{def:eqvt} \sigma \cdot (f x) = f (\sigma \cdot
x). \end{equation}
%
The converse also holds.
%
There are many equivariant functions.
%
Using lemma \ref{supports:eqvt} it is not hard to see that the support function
$\mathrm{supp} : X \to \mathcal{P}_{\mathrm{fin}} \mathbb A$ is equivariant:
$\sigma \cdot \supp{x} = \supp{\sigma \cdot x}$.
%
The identity function $\mathbf{1}_{X}$ is equivariant.
%
Composition is equivariant: $\sigma \cdot (g \circ f) = (\sigma \cdot g) \circ
(\sigma \cdot f)$.
%
The projections $X \times Y \to X$ and injections $X \to X + Y$ are equivariant.
%
Function application is equivariant: $\sigma \cdot (f x) = (\sigma \cdot f)
(\sigma \cdot x)$.
%
The boolean operations on sets are equivariant: $\sigma \cdot (x \ast y) =
(\sigma \cdot x) \ast (\sigma \cdot y)$ for $\ast \in \{ \mathord{\cup},
\mathord{\cap}, \mathord{\setminus} \}$, and more generally $\sigma \cdot
(\bigcup X) = \bigcup (\sigma \cdot X) = \bigcup \{ \sigma \cdot x \mid x \in X
\}$ and similarly for intersections.

Certain predicates also exhibit an equivariance property. For example,
freshness, set membership and the subset relation are equivariant: $x \freshfor
y$ iff $(\sigma \cdot x) \freshfor (\sigma \cdot y)$, $x \in A$ iff $\sigma
\cdot x \in \sigma \cdot A$ and $A \subseteq A'$ iff $\sigma \cdot A \subseteq
\sigma \cdot A'$.

A simple but useful consequence of equivariance is that an equivariant function
cannot extend the support of its argument.
%
More precisely, \begin{lemma} \label{eqvt-supp-reduce} If $f : X \to Y$ is an
equivariant function between nominal sets $X$ and $Y$ and $x \in X$ then
$\supp{fx} \subseteq \supp{x}$. More generally, if $f : X \to Y$ is a
finitely-supported function then $\supp{fx} \subseteq \supp{f} \cup \supp{x}$.
\end{lemma}

\begin{proof} If $\sigma$ is a permutation such that $\sigma a = a$ for all $a
\in \supp{x}$ then it follows that $\sigma \cdot x = x$.
%
Furthermore by the equivariance of $f$ it is the case that $\sigma \cdot (fx) =
f(\sigma \cdot x) = fx$ which implies that $\supp{x}$ supports $fx$ as required.
%
The general case follows by noting that function evaluation is equivariant  as a
function $((X \to_{\mathrm{fs}} Y) \times X) \to Y$, and the support of the pair
$\langle{f, x\rangle}$ is $\supp{f} \cup \supp{x}$.  \end{proof}


\subsection{A Category of Nominal Sets}
\label{subsect:nset:category}

\begin{definition} The category \define{$\mathbf{NSet}$} has nominal sets for
objects and equivariant functions for arrows. \end{definition}

It is reasonably clear that the composition of equivariant functions is
equivariant, so this does define a category.  Furthermore, it has products
$\times$, coproducts $+$ and exponentials $\to_{\mathrm{fs}}$ given as above,
and to cut a long story short it is also a Boolean topos: the subobject
classifier is the discrete nominal set on $\mathbf{2} \defeq \{ \top, \bot\}$.

\begin{lemma} \label{lemma:schequiv} Let $\mathbb I$ be the category whose
objects are finite subsets of $\mathbb A$ and whose arrows are injections
between them. Then the category $\mathbf{NSet}$ is equivalent to the full
subcategory $\mathbf{Sch}$ of $\mathbf{Set}^{\mathbb I}$ consisting of those
presheaves that preserve pullbacks.\end{lemma}

\begin{proof}[Sketch Proof] A functor $F: \mathbf{NSet} \to \mathbf{Sch}$ is
defined by \begin{equation} (F X) s \defeq \{ x \in X \mid \text{$s$ supports $x$}
\}, \end{equation} where if $i : s \rightarrowtail s'$ then there is some
permutation $\sigma_i$ that extends $i$, so define $F i(x) \defeq \sigma_i \cdot
x$.  Note that there are many choices for $\sigma_i$ but this definition is
independent of this choice, because if $\sigma_i$ and $\sigma'_i$ both extend
$i$ then $\sigma_i^{-1} \sigma'_i \freshfor s$ and $s$ supports $x$ so that
$\sigma_i^{-1} \cdot \sigma'_i \cdot x = x$ and hence $\sigma_i \cdot x =
\sigma'_i \cdot x$.

A functor $G : \mathbf{Sch} \to \mathbf{NSet}$ is defined by \begin{equation} G
X \defeq \mathrm{colim} (X |_{\mathbb J}) \end{equation} where the colimit is
taken over the restriction of $X$ to a diagram of shape $\mathbb J$, which is
the category whose objects are finite subsets of $\mathbb A$ but whose arrows
are just the inclusions between them. The action of $G$ on morphisms is given by
the universal property of this colimit.

There are obvious transformations $\mathbf{1} \to FG$ and $\mathbf{1} \to GF$
which essentially take elements to their equivalence classes in the colimit.
%
It is straightforward to show that these are natural isomorphisms and hence that
$F$ and $G$ define an equivalence of categories as required.  \end{proof}

\subsection{Binding in Nominal Sets}
\label{subsect:nset:binding}

The syntactic notion of a binding operator is captured semantically by the
following condition.
%
Pitts\cite{PittsAM:alpsri} demonstrates that this is effectively the condition
that is needed to be able to define functions by purely structural recursion
over a syntactic signature with binding.

\begin{definition} \label{def:FCB} If $X$ is a nominal set and $f : \mathbb A
\to X$ is a finitely supported function then $f$ satisfies the \define{freshness
condition for binders} (FCB) if there exists $a \in \mathbb A$ such that $a
\freshfor f$ and $a \freshfor f a$. \end{definition}

\TODO{Define for FM sets too?}

\begin{lemma} \label{lemma:FCB} If $f : \mathbb A \to X$ satisfies the FCB then
there exists a unique $x \in X$ such that for any name $a \freshfor f$, $f a =
x$. \end{lemma}

\begin{proof} Since $f$ satisfies the FCB let $a \in \mathbb A$ be such that $a
\freshfor f$ and $a \freshfor f a$.
%
Let $b \freshfor f$ and let $c \freshfor (f, a, b)$.
%
If $a = b$ then $f a = f b$ trivially, so suppose that $a \neq b$.
%
Then \begin{equation} \begin{array}[t]{rcl} f b &=& (ab) \cdot (f a) \quad \text{as
$a \freshfor f$ and $b \freshfor f$} \\
%
&=& (ac) \cdot (bc) \cdot (ac) \cdot (f a) \\
%
&=& (ac) \cdot (bc) \cdot (f a) \quad \text{as $a \freshfor fa$ and $c \freshfor
(f, a)$} \\
%
&=& (ac) \cdot (f a) \quad \text{as $b \freshfor f$ and $a \neq b$ and $c
\freshfor (f, a)$} \\
%
&=& f a \quad \text{as $a \freshfor f a$ and $c \freshfor (f, a)$} \\
\end{array} \end{equation} so that $f a$ is the unique element of $X$ as
required.\end{proof}

\begin{definition} \label{def:freshin} If $f : \mathbb A \to X$ satisfies the
FCB then write $\freshin{b}{f b}$ for the unique $x \in X$ such that for any
name $b \freshfor f$ it is the case that $f b = x$.  \end{definition}

When performing calculations involving terms of the form $\freshin{b}{f b}$, it
is common to pick a particular name $b$ that is fresh for $f$ and calculate
using $f b$.
%
Everything in the remainder of this discussion is finitely supported so it is
always possible to simply pick a name that is asserted to be `fresh', which
means that it is fresh for everything that has already been mentioned.
%
It is also normally clear that the $f$ used in the term $\freshin{b}{f b}$ does
satisfy the FCB, so this fact is rarely mentioned.
%
The following lemma illustrates a simple calculation using
$\freshin{\ldots}{\ldots}$.

\begin{lemma} \label{lemma:freshfresh} Let $f : \mathbb A \to X$, $g : \mathbb A
\to Y$ and $h : X \to Y \to Z$ be finitely-supported functions such that $f$ and
$g$ satisfy the FCB.  Then \[h\ (\freshin{a}{f a})\ (\freshin{b}{g b}) =
\freshin{c}{h\ (f c)\ (g c)}. \] \end{lemma}

\begin{proof} Let $d$ be a fresh name (i.e. $d \freshfor f, g, h$). Then
$\freshin{a}{f a} = f d$ and $\freshin{b}{g b} = g d$, and $\freshin{c}{h\ (f c)
\ (g c)} = h\ (f d)\ (g d)$ as required.
%
Notice that as promised above it is clear that $\lambda c. h (f c)(g c)$
satisfies the FCB: if $d \freshfor f, g, h$ then certainly $d \freshfor \lambda
c. h (f c)(g c)$ and furthermore since $f$ and $g$ satisfy the FCB it follows
that $d \freshfor f d$ and $d \freshfor g d$ so by lemma \ref{eqvt-supp-reduce}
it follows that $d \freshfor h (f d)(g d)$ as required.  \end{proof}

Note that if $X$ is a discrete nominal set then any finitely-supported $f$
satisfies the FCB. In particular if $f$ is a finitely-supported predicate on
$\mathbb A$ and hence a function $\mathbb A \to \mathbf{2}$ then it satisfies
the FCB. In this case, $\freshin{a}{fa} =
{\reflectbox{\ensuremath{\mathsf{N}}}}a. f a$ where
${\reflectbox{\ensuremath{\mathsf{N}}}}$ is the `new' quantifier of Pitts and
Gabbay\cite{PittsAM:newaas-jv}.

There is a symmetric monoidal structure $\otimes$ on $\mathbf{NSet}$. 
%
Via the equivalence of lemma \ref{lemma:schequiv} it can be characterised
abstractly as the Day tensor\cite{day:closedcats} of functors $\mathbb I \to
\mathbf{Set}$.
%
Concretely, if $X$ and $Y$ are nominal sets then \begin{equation}
\label{def:otimes} X \otimes Y \defeq \{ \langle x, y \rangle \in X \times Y
\mid x \freshfor y \}  \end{equation} with the action on arrows given
componentwise.
%
By an abstract argument that relies on the characterisation of $\otimes$ as the
Day tensor, $\mathbf{NSet}$ is $\otimes$-monoidal closed.
%
In fact this discussion only uses this tensor as part of the functor $(-)
\otimes \mathbb A$ and it is possible to characterise its right adjoint, written
$\delta$, as follows.
%
There is an equivalence relation $\sim_{\alpha}$ on $X \times \mathbb A$ that
captures the notion of $\alpha$-equivalence as \begin{equation}
\label{def:simalpha} \langle x, a \rangle \sim_{\alpha} \langle x', a' \rangle
\quad \Leftrightarrow_{\mathrm{def}} \quad \freshin{b}{(ab)\cdot x = (a'b) \cdot
x'}.  \end{equation}
%
Writing the equivalence classes as $[a].x \defeq [\langle x, a
\rangle]_{\sim_{\alpha}}$ it is then possible to define \begin{equation}
\label{def:deltanom:obj} \delta X \defeq (X \times \mathbb A)/{\sim_\alpha} = \{
[a].x \mid a \in \mathbb A \wedge x \in X \}. \end{equation}
%
The permutation action on the equivalence classes is given by $\sigma \cdot
([a].x) \defeq [\sigma a].(\sigma \cdot x)$, from which it follows that
$\supp{[a].x} = \supp{x} \setminus \{a\}$ and therefore $\delta X$ is a nominal
set.

If $x' \in \delta X$ and $a \freshfor x'$ then define the \define{concretion}
$x'@a$ as the unique $x \in X$ such that $x' = [a].x$.
%
To see that there exists such an $x$ note that $x' = [b].y$ for some $b \in
\mathbb A$ and some $y \in X$, so if $c$ is a fresh name then $(ac) \cdot (ab)
\cdot y = (bc) \cdot y$ and hence $[a].((ac) \cdot y) = [b].y$.
%
Therefore if $d \freshfor x \in X$ then $([a].x)@d = (ad) \cdot x$.

If $f : X \to Y$ is an equivariant function and $x' \in \delta X$ then define
\begin{equation} \label{def:deltanom:arrow} (\delta f) x' \defeq
\freshin{b}{[b].(f(x'@b))}. \end{equation}
%
It is straightforward to check that $\delta$ so defined is a functor on
$\mathbf{NSet}$, using the following lemma.

\begin{lemma} \label{lemma:delta-abs} If $f : X \to Y$ is an arrow of
$\mathbf{NSet}$, $b \in \mathbb A$ and $x \in X$ then \begin{equation*}\delta f ([b].x) = [b].(f x)
\end{equation*} \end{lemma}

\begin{proof} \begin{equation} \begin{array}[t]{rcl} \delta f ([b].x)
%
&=& \freshin{c}{[c].(f((bc) \cdot x))} \\
%
&=& \freshin{c}{[c].(bc) \cdot (f x)} \\
%
&=& \freshin{c}{(bc) \cdot ([b].(f x))} \\
%
&=& \freshin{c}{[b].(f x)} \\
%
&=& [b].(f x) \\ \end{array} \end{equation} since $c$ is fresh and $b \freshfor
[b].(f x)$. \end{proof}

The unit of the adjunction $(-)\otimes \mathbb A \dashv \delta$ is the natural
transformation $\xi : \mathbf{1} \to \delta ((-) \otimes \mathbb A)$ defined by
\begin{equation} \xi_X(x) \defeq \freshin{a}{[a].\langle x, a \rangle}.
\end{equation}
%
The counit is the concretion operator $\mathord{@} : (\delta-) \otimes \mathbb A
\to \mathbf{1}$ defined above.
%
That the triangular identities are satisfied amounts to saying that $([a].x)@a =
x$ for any name $a$, and $[b].(x'@b) = x'$ for a fresh name $b$.

To see roughly why the operation $\delta$ corresponds to `binding', consider the
set $\Lambda$ of $\lambda$ terms, and its quotient
$\Lambda/\mathord{\sim}_{\alpha}$ under $\alpha$-equivalence.
%
The set $\Lambda$ may be defined recursively by the rules \begin{equation}
\infer[(a \in \mathbb A)]{\quad a \quad}{} \quad \infer{MN}{M & N} \quad
\infer[(a \in \mathbb A)]{\lambda a. M}{M} \end{equation} which amounts to
saying that $\Lambda$ is an initial algebra for the endofunctor $\mathbb A +
(-)^{2} + \mathbb A \times (-)$ on $\mathbf{NSet}$.
%
Notice that the components of this functor arise directly from the recursive
definition of $\Lambda$.
%
Furthermore, the initiality of $\Lambda$ is the property that gives rise to the
principle of structural induction on $\lambda$ terms.
%
Similarly, $\Lambda/\mathord{\sim}_{\alpha}$ is an initial algebra for the
endofunctor $\mathbb A + (-)^{2} + \delta(-)$, and the initiality gives rise to
an induction principle that can be described as `structural-up-to-$\alpha$'.
%
It is a structural principle in the sense that it decomposes terms into their
components, and it is `up-to-$\alpha$' in the sense that a decomposition of a
term of the form $\lambda a. M$ picks a name $a$ which is fresh for any other
names in scope.
%
This captures the common informal practice for inductive reasoning over syntax
with binding, where bound names are always chosen to be fresh.
%
A much more detailed discussion of this can be found
elsewhere\cite{PittsAM:alpsri}.
%
Notice that $\delta$ is a purely semantic construction, so it can be used even
without any obvious notion of syntax.
%
For this reason, the word `binding' is used to mean `related to the adjunction
$(-)\otimes \mathbb A \dashv \delta$' in chapters \ref{domthy} and
\ref{abstract-justification}, since these chapters are not concerned with
syntax.
%
This is justified by the results of chapter \ref{densem} which relates the
semantic and syntactic notions of binding in the language Nominal HOPLA.

\subsection{Choice and Nominal Sets}

Nominal set theory is closely related to Fraenkel-Mostowski (FM) set theory,
which was originally developed early in the 20th century to prove the
independence of the Axiom of Choice (AC) from the other axioms of set theory.
%
The relationship between the two theories is discussed further in section
\ref{subsect:fm-set-theory} but here it is merely worth noting that, as a
consequence of its origins, AC fails to hold in FM set theory and this failure
also occurs in nominal set theory.
%
For example, AC implies that there is an injective function $f : \mathbb N \to
\mathbb A$ picking distinct names for each $n \in \mathbb N$.
%
Suppose that $f$ has a finite support, $s$, then since $f$ has infinite range it
must be that there exist $m \neq n \in \mathbb N$ such that $f(m), f(n) \notin
s$ and hence $(f(m)\ f(n)) \cdot f = f$.
%
Also, $\mathbb N$ is a discrete nominal set so that $(f(m)\ f(n)) \cdot n = n$.
%
However, $(f(m)\ f(n)) \cdot (f(n)) = f(m) \neq f(n)$ which is a contradiction,
which shows that $f$ cannot have a finite support so it certainly is not a
function in the sense of nominal set theory.

The impact of the failure of AC is not as severe as perhaps it sounds, but it
does have some subtle consequences.
%
One of the more interesting ones is that there are a number of distinct ways of
characterising the subsets of a nominal set that are, in some sense, finite.

\subsubsection{Definitions of Finiteness} \label{def:finiteness}
%
\begin{enumerate}[(1)] \item \label{finite:usual} The usual definition: $A$ is
finite if it bijects with a finite ordinal.
%
\item \label{finite:kuratowski} Kuratowski's definition: $\varnothing$ is
finite, $\{x\}$ is finite for each $x$ and if $A$ and $B$ are finite then so is
$A \cup B$.
%
\item \label{finite:directed} $A$ is finite if for all directed collections
$(B_i)_{i \in I}$ such that $A \subseteq \bigcup B_i$ there exists $i \in I$
such that $A \subseteq B_i$.
%
\item \label{finite:chain} $A$ is finite if for all increasing chains $B_0
\subseteq B_1 \subseteq \ldots \subseteq B_n \subseteq \ldots$ such that $A
\subseteq \bigcup B_n$ there exists $n \in \mathbb N$ such that $A \subseteq
B_n$.
%
\item \label{finite:dedekind} Dedekind's definition: $A$ is finite if there
exist no injections into any of its proper subsets.
%
\newcounter{finitenessdefs} \setcounter{finitenessdefs}{\value{enumi}}
\end{enumerate}

All of these definitions coincide in classical ZFC set theory, but the situation
is more complicated within nominal set theory because in the internal
higher-order logic of nominal set theory every quantification is over only
finitely-supported objects.
%
In particular, in the definition of (\ref{finite:directed})-finiteness the
mapping $i \mapsto B_i$ must be finitely supported, and similarly the mapping $n
\mapsto B_n$ is finitely-supported in the definition of
(\ref{finite:chain})-finiteness.
%
Also in the definition of (\ref{finite:dedekind})-finiteness the injections in
question are all finitely-supported. 
%
For the avoidance of doubt, where the word `finite' appears in this discussion
without reference to any of these definitions, it means
(\ref{finite:usual})-finite.
%
There is another possible way to characterise finiteness that is specific to the
theory of nominal sets: \begin{enumerate}[(1)]
\setcounter{enumi}{\value{finitenessdefs}} 
%
\item \label{finite:stages} $A$ is finite if $\{x \in A \mid \supp{x} \subseteq
s\}$ is (\ref{finite:usual})-finite for each $s \subseteq_{\mathrm{fin}} \mathbb
A$. \setcounter{finitenessdefs}{\value{enumi}} \end{enumerate}

In fact, these \arabic{finitenessdefs} characterisations capture only three
distinct notions of finiteness as the following lemma shows.

\begin{lemma} \label{lemma:finite:nset} Let $A \subseteq X$ be a
finitely-supported subset of a nominal set $X$.
%
Then in the theory of nominal sets \[ \begin{array}{rc} & \text{$A$ is
(\ref{finite:usual})-finite} \\ \Leftrightarrow & \text{$A$ is
(\ref{finite:kuratowski})-finite} \\ \Leftrightarrow & \text{$A$ is
(\ref{finite:directed})-finite} \\ \Rightarrow & \text{$A$ is
(\ref{finite:chain})-finite} \\ \Rightarrow & \text{$A$ is
(\ref{finite:dedekind})-finite} \\ \Leftrightarrow & \text{$A$ is
(\ref{finite:stages})-finite} \end{array} \] and no other implications hold in
general.  \end{lemma}

\begin{proof} \ \subparagraph{(\ref{finite:usual})-finite $\Rightarrow$
(\ref{finite:kuratowski})-finite} If $A$ bijects with the finite ordinal $n$
then its elements can be enumerated as $a_0, a_1, \ldots, a_{n-1}$.
%
By a simple induction on $n$ it follows that $A$ is
(\ref{finite:kuratowski})-finite.

\subparagraph{(\ref{finite:kuratowski})-finite $\Rightarrow$
(\ref{finite:directed})-finite} Let $(B_i)_{i \in I}$ be a directed collection
such that $A \subseteq \bigcup B_i$.
%
If $A = \varnothing$ then any $i \in I$ is such that $A \subseteq B_i$.
%
If $A = \{x\}$ then there must exist $i \in I$ such that $A \subseteq B_i$ since
$A \subseteq \bigcup B_i$.
%
Finally if $A = A_1 \cup A_2$ where $A_1$ and $A_2$ are
(\ref{finite:kuratowski})-finite then by induction there exist $i_1, i_2 \in I$
such that $A_1 \subseteq B_{i_1}$ and $A_2 \subseteq B_{i_2}$, and by
directedness there exists $i_3 \in I$ such that $B_{i_1} \subseteq B_{i_3}$ and
$B_{i_2} \subseteq B_{i_3}$ so that $A \subseteq B_{i_3}$ as required.

\subparagraph{(\ref{finite:directed})-finite $\Rightarrow$
(\ref{finite:usual})-finite} Let $(B_i)_{i \in I}$ be the collection of all
(\ref{finite:usual})-finite subsets of $A$ ordered by inclusion, then this
collection is directed so there exists $i \in I$ such that $A \subseteq B_i$ and
hence $A = B_i$ for some (\ref{finite:usual})-finite set $B_i$.

\subparagraph{(\ref{finite:directed})-finite $\Rightarrow$
(\ref{finite:chain})-finite} The chain $B_0 \subseteq B_1 \subseteq \ldots
\subseteq B_n \subseteq \ldots$ is directed, so this case is immediate.

\subparagraph{(\ref{finite:chain})-finite $\not\Rightarrow$
(\ref{finite:usual})-finite} For example $\mathbb A$ is
(\ref{finite:chain})-finite because if the increasing chain $B_0 \subseteq B_1
\subseteq \ldots \subseteq \mathbb A$ is supported by the finite set $s$ then
each element $B_i$ of the chain must also be supported by $s$.
%
However there are only finitely many such subsets of $\mathbb A$, namely the
subsets of $s$ and the supersets of $\mathbb A \setminus s$, so the chain must
eventually become stationary and hence $B_n = \mathbb A$ for some $n \in \mathbb
N$.
%
On the other hand by definition $\mathbb A$ is not (\ref{finite:usual})-finite.

\subparagraph{(\ref{finite:chain})-finite $\Rightarrow$
(\ref{finite:dedekind})-finite} It is simpler to show the contrapositive, so
assume that $A$ is (\ref{finite:dedekind})-infinite and therefore obtain a
finitely supported injection $f : A \to A$ and an element $a \in A$ such that
the range of $f$ is a subset of $A \setminus \{a\}$.
%
For each $n$ let $B_n = \{ a, f(a), f^2(a), \ldots, f^{n}(a) \}$.
%
It is straightforward to show that $B_0 \varsubsetneq B_1 \varsubsetneq \ldots$
since $f$ is injective and $a$ is not in its range.
%
Furthermore since $f$ and $a$ are finitely supported it follows that each $B_n$
is supported by $\supp{f} \cup \supp{a}$ so that the chain $(B_n)_{n \in \mathbb
N}$ is also finitely supported.
%
Let $B_\omega = \bigcup B_n$ and for each $n$ let $C_n = (A \setminus B_\omega)
\cup B_n$, then certainly $A = \bigcup C_n$ and $(C_n)_{n \in \mathbb N}$ is
finitely supported but there exists no $n \in \mathbb N$ such that $A = C_n$ so
that $A$ is certainly not (\ref{finite:chain})-finite.

\subparagraph{(\ref{finite:dedekind})-finite $\not\Rightarrow$
(\ref{finite:chain})-finite} For example $\mathcal{P}_{\mathrm{fin}} \mathbb A$
is (\ref{finite:chain})-infinite because if \begin{equation} B_n = \{ s
\subseteq_{\mathrm{fin}} \mathbb A \mid |s| \le n \} \end{equation} then $B_0
\subseteq B_1 \subseteq \ldots$ is a finitely supported chain and
$\mathcal{P}_{\mathrm{fin}} \mathbb A = \bigcup B_n$ but there exists no $n \in
\mathbb N$ such that $\mathcal{P}_{\mathrm{fin}} \mathbb A = B_n$.
%
On the other hand suppose that $f : \mathcal{P}_{\mathrm{fin}} \mathbb A \to
\mathcal{P}_{\mathrm{fin}} \mathbb A$ is a injection supported by the finite set
$s$ and let $s_0$ be outside the range of $f$.
%
Considering the sequence that starts at $s_0$ and continues by setting $s_{n+1}
= f(s_n)$, it is clear that this sequence never repeats as $f$ is injective.
%
However, by considering supports it is also the case that \begin{equation}
s_{n+1} = \supp{s_{n+1}} = \supp{f(s_n)} \subseteq \supp{f} \cup \supp{s_n}
\subseteq s \cup s_n \end{equation} so that $s_n \subseteq s \cup s_0$ for all
$n$ and therefore the sequence $(s_n)_{n \in \mathbb N}$ must eventually repeat.
%
This is a contradiction, so $\mathcal{P}_{\mathrm{fin}} \mathbb A$ is
(\ref{finite:dedekind})-finite as required.

\subparagraph{(\ref{finite:dedekind})-finite $\Rightarrow$
(\ref{finite:stages})-finite} Suppose for a contradiction that $\{x \in A \mid
\supp{x} \subseteq s\}$ were infinite.
%
This set can be wellordered (externally to the theory of nominal sets) so that
it contains an injective sequence $x_0$, $x_1$, $\ldots$.
%
Define $f : A \to A$ by \begin{equation} f x \defeq \begin{cases} x_{n+1} &
\text{if } x = x_n \\ x & \text{otherwise,} \end{cases} \end{equation} then $f$
is supported by $\supp{A} \cup s$ because if $\sigma \freshfor \supp{A} \cup s$
then $\sigma \cdot x_n = x_n$ for all $n \in \mathbb N$.
%
It is also immediate that $f$ is injective and not surjective so that $A$ is not
(\ref{finite:dedekind})-finite as required.

\subparagraph{(\ref{finite:stages})-finite $\Rightarrow$
(\ref{finite:dedekind})-finite} Suppose for a contradiction that $f : A \to A$
is finitely supported and injective but not surjective, and let $x_0$ be outside
its range.
%
It follows that setting $x_{n+1} = f(x_n)$ for all $n \in \mathbb N$ gives an
injective sequence $(x_n)_{n \in \mathbb N}$ in $A$.
%
Therefore for all $n$ \begin{equation} \supp{x_{n+1}} = \supp{f(x_n)} \subseteq
\supp{f} \cup \supp{x_n} \end{equation} so that by induction $\supp{x_n}
\subseteq \supp{f} \cup \supp{x_0}$ for all $n$.
%
Therefore $\{x \in A \mid \supp{x} \subseteq \supp{f} \cup \supp{x_0}\}$ cannot
be finite, and hence $A$ is not (\ref{finite:stages})-finite as required.


\end{proof}

\section{Conclusion}

This chapter has set out the mathematical prerequisites for the remainder of
this dissertation, defining a consistent nomenclature and notation for both
domain theory and for the theory of nominal sets.
%
The next chapter concentrates on combining the ideas of these two theories to
construct a nominal domain theory.
%
For an indication that this could be harder than it might first appear, notice
that (\ref{finite:directed})-finiteness and (\ref{finite:chain})-finiteness (as
defined in \ref{def:finiteness}) are very closely related to the idea of
isolation in domain theory with respect to approximation by directed sets and by
$\omega$-chains respectively.
%
This observation influences the design of an appropriate nominal notion of
approximation, as demonstrated in section \ref{fm:continuity} below.

% vim: set filetype=tex foldlevel=0 cms=\%%s nowrap tw=80:
