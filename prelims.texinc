\chapter{Preliminaries}
\label{prelims}

This chapter discusses some prerequisites of the remainder of this dissertation.

\section{Domain Theory for Concurrency}
\label{dtfc}

\TODO{Write section introducing Domain Theory for Concurrency}

\section{Nominal Sets}
\label{nsets}

The syntactic principle of `binding' of a variable is easy to understand.
%
Even the dullest of algebra students would agree that the theorems \[
\label{algthm1} \forall x. (5x+2 = 12 \Rightarrow x = 2) \quad \text{and} \quad
\forall y.  (5y+2 = 12 \Rightarrow y = 2) \] express precisely the same concept,
as the symbols $x$ and $y$ are just used to name something to which a later
reference needs to be made.
%
In some sense, it seems to be an innate ability to give something a name and
later refer to that `something' using just its name.
%
Furthermore, such a name may only make sense in a particular context.

This concept can be seen to be surprisingly subtle when working fully formally.
%
Computers (and the formal systems that they implement) have no innate ability to
deal with locally-scoped names, so this ability must be carefully implemented by
hand.
%
Over the years a variety of ways to deal with locally-scoped names have been
created.
%
This discussion will concentrate on a recently developed method based on a
non-standard set theory: the theory of nominal sets.
%
This theory is relevant to this thesis because it gives a purely semantic
account of the idea of names and binding.
%
This will be very important for giving an account of a compositional
denotational semantics.
%
For example, the denotation of the $\pi$-calculus term $\nu a. P$ should be
built from the denotation of $P$ via some kind of binding operator: the name $a$
should appear `free' in $\sem{P}$ but must not be `free' in $\sem{\nu a. P}$.
%
The theory of nominal sets makes sense of the idea of a name appearing `free' in
a semantic object such as $\sem{P}$ in a fashion that smoothly extends the
syntactic definition of `free' names.
%
It also allows the construction of the kind of binding operator that takes
$\sem{P}$ to $\sem{\nu a. P}$.
%
Importantly, the internal language of the theory of nominal sets is very close
to that of standard set theory, so the development of a domain theory for
concurrency within nominal set theory is accessible to conventional domain
theorists as the name-theoretic details can be ignored when they are not
relevant.

The roots of nominal set theory lie in the study of syntax, so it will be
introduced from this viewpoint.
%
The theory rests on two key observations about names.
%
The first is that the concrete names used by any piece of syntax are not
relevant outside of their scope.
%
The second is that any piece of syntax can only explicitly mention finitely many
names.

From the first observation, the names used by any piece of syntax can be
injectively renamed to some other collection of names without changing the
underlying meaning of the syntax.
%
Unlike the collection of injective renamings, the collection of bijective
renamings forms a group, and the group structure simplifies the theory.
%
The restriction of attention to bijective renamings is not a severe constraint.
%
Also, since each piece of syntax only mentions finitely many names it is
possible to turn attention to those bijective renamings that fix all but
finitely many names.
%
A few lemmas about such bijective renamings are developed in
\ref{subsect:nset:finaut}, then \ref{subsect:nset:theory} introduces the theory
of nominal sets and \ref{subsect:nset:examples} shows some examples and
constructions for building new ones.
%
The category of nominal sets is briefly explored in \ref{subsect:nset:category}
and finally \ref{subsect:nset:binding} demonstrates how the theory can be used
to capture the idea of `binding' a name.

\subsection{Finite Automorphisms on Names}
\label{subsect:nset:finaut}

Let $\mathbb A$ be an infinite set of names.
%
The letter $\mathbb A$ is chosen as names are also known as `atoms': they are
atomic in the sense that they have no internal structure.
%
From the discussion above, the basis for the theory of nominal sets is that of a
finite automorphism of $\mathbb A$, i.e. a bijection $\sigma : \mathbb A \to
\mathbb A$ such that $\sigma a \neq a$ for only finitely many $a \in \mathbb A$.
%
In particular this includes permutations of $\mathbb A$, which are represented
as finite lists of transpositions of pairs of names $(a_1 b_1) \ldots (a_n b_n)$
and whose action is defined by recursion on $n$ as $\iota a \defeq a$ and
\begin{equation} (a_1 b_1) \ldots (a_n b_n) (a_{n+1} b_{n+1}) a \defeq
\begin{cases} (a_1 b_1) \ldots (a_n b_n)  b_{n+1} & a = a_{n+1} \\ (a_1 b_1)
\ldots (a_n b_n) a_{n+1} & a = b_{n+1} \\ (a_1 b_1) \ldots (a_n b_n)  a &
\text{otherwise.} \end{cases} \end{equation}

In fact, any finite automorphism may be represented as a permutation, as the
following lemma shows.

\begin{lemma} \label{lemma:automorphism:permutation} Any finite automorphism
$\sigma : \mathbb A \to \mathbb A$ may be represented as a sequence of
transpositions of pairs of names $(a_1 b_1) \ldots (a_n b_n)$ where either
$\sigma = \mathbf{1}_{\mathbb A}$ (and $n = 0$) or $n < |\{a \in \mathbb A \mid
\sigma a \neq a\}|$ and for each $i$, $\sigma a_i \neq a_i$ and $\sigma b_i \neq
b_i$.  \end{lemma}

\begin{proof} The proof proceeds by strong induction on $|\{a \in \mathbb A \mid
\sigma a \neq a\}|$.
%
If $|\{a \in \mathbb A \mid \sigma a \neq a\}| = 0$ then $\sigma =
\mathbf{1}_{\mathbb A}$.
%
Suppose that $|\{a \in \mathbb A \mid \sigma a \neq a\}| > 0$ and let $a \in
\mathbb A$ be such that $\sigma a \neq a$.
%
In order to use the induction hypothesis, it is necessary to find an
automorphism that moves strictly fewer names.
%
It will turn out that $\sigma \circ (a\ \sigma^{-1} a)$ is such an automorphism.
%
To see this, notice firstly that $\sigma \bigl((a\ \sigma^{-1} a) a\bigr) = a$.
%
Furthermore, suppose that $b$ is such that $\sigma \bigl((a\ \sigma^{-1} a)
b\bigr) \neq b$, then $\sigma b \neq b$ as follows.
%
Clearly $b \neq a$; also if $b = \sigma^{-1} a$ then $\sigma b = a \neq b$;
finally if $b \neq \sigma^{-1} a$ then $(a\ \sigma^{-1} a) b = b$ so that $b
\neq \sigma \bigl((a\ \sigma^{-1} a) b\bigr) = \sigma b$ as required.
%
Therefore $\{b \in \mathbb A \mid \sigma \bigl((a\ \sigma^{-1} a) b\bigr) \neq
b\} \varsubsetneq \{a \in \mathbb A \mid \sigma a \neq a \}$ so the induction
hypothesis applies to $\sigma \circ (a\ \sigma^{-1} a)$ to give a sequence
$\vec{\tau}$ of transpositions.
%
Note that $\sigma^{-1} a \neq a$ since $a \neq \sigma a$, so that $\vec{\tau}
(a\ \sigma^{-1}a)$ is as desired.  \end{proof}


Suppose that some agent $P$ `knows about' a particular set $B$ of names.
%
For example, suppose that $P$ is a term in some context and the names in $B$ are
free within the scope of $P$ so that they cannot be permuted without affecting
its context.
%
More precisely if $P$ only `knows about' the names in $B$ then from the point of
view of $P$ any names outside $B$ are equivalent (in the sense that their
precise identities carry no significance: of course, if $P$ sees two distinct
names from outside $B$ then they can be distinguished.)
%
Therefore $P$ may characterise a permutation $\sigma$ in terms of its
`footprint' on $B$: the action of $\sigma$ just on the names in $B$.
%
Of course if $a \notin B$ but $\sigma a \in B$ then this is significant,
although the precise source $a$ of $\sigma a$ is not important.
%
Similarly it is significant if $b \in B$ but $\sigma b \notin B$, although the
precise destination $\sigma b$ of $b$ is not.
%
If $B$ is finite then it is possible to specify a disjoint set $D$ that
represents a canonical collection of `unknown' sources and destinations of the
elements in $B$.
%
Then from the point of view of $P$ the permutation $\sigma$ may be represented
as a permutation $\sigma_2$ such that \begin{enumerate}
%
\item if $b \in B$ and $\sigma b \in B$ then $\sigma_2 b = \sigma b$,
%
\item if $b \in B$ but $\sigma b \notin B$ then $\sigma_2 b \in D$, and
%
\item if $a \notin B$ but $\sigma a \in B$ then $\sigma^{-1}_2 \sigma a \in D$.
%
\end{enumerate}
%
Importantly a set $D$ may be chosen that suffices for any permutation $\sigma$,
and a finite such $D$ exists, so $\sigma_2$ takes only finitely many possible
values.
%
This fact is important in the proof of \ref{fineltextension}.
%
The intuition described above is captured by the following lemma, which
generalises the result that $(be) = (de)(bd)(de)$ for distinct names $b, d, e$.

\begin{lemma}[Footprint Lemma] \label{footprint} Let $A$, $B$ and $D$ be
mutually disjoint finite sets of names such that $|D| > |B|$. Then for all
permutations $\sigma$ such that $\sigma a = a$ for all $a \in A$ there exist
permutations $\sigma_1$, $\sigma_2$, $\sigma_3$ such that \begin{enumerate}
\item $\sigma = \sigma_1 \sigma_2 \sigma_3$, and \item $\sigma_1 a = a$ and
$\sigma_3 a = a$ for all $a \in A \cup B$, and \item $\sigma_2 a \neq a$ only if
$a \in (B \cup D) \setminus A$. \end{enumerate} \end{lemma}

\begin{proof} Represent $\sigma$ as a finite list of transpositions of names not
in $A$ and proceed by induction on the length of the list.
%
If the list is empty then $\sigma = \iota$ and $\sigma_1 = \sigma_2 = \sigma_3 =
\iota$ is a factorisation in the desired form. On the other hand, if the list is
nonempty then write $\sigma = \sigma' (ab)$ where $a \notin A$ and $b \notin A$
and $\sigma' c = c$ for all $c \in A$. 
%
By induction there exist $\sigma_1$, $\sigma_2$ and $\sigma_3$ such that
$\sigma' = \sigma_1 \sigma_2 \sigma_3$ and $\sigma_1 c = c$ and $\sigma_3 c = c$
for all $c \in A \cup B$ and $\sigma_2 c \neq c$ only if $c \in (B \cup D)
\setminus A$.

If $a \notin B$ and $b \notin B$ then define $\sigma'_3 = \sigma_3(ab)$.  Since
$\sigma'_3 c = c$ for all $c \in A \cup B$, $\sigma = \sigma_1 \sigma_2
\sigma'_3$ is a factorisation in the desired form. 
%
If $a \in B$ and $b \in B$ then $\sigma_3(ab) = (ab)\sigma_3$ so let $\sigma'_2
= \sigma_2(ab)$ which has $\sigma'_2 c \neq c$ only if $c \in (B \cup D)
\setminus A$, so that $\sigma = \sigma_1 \sigma'_2 \sigma_3$ is a factorisation
in the desired form.

Otherwise without loss of generality let $a \notin B$ and $b \in B$. Then
$\sigma_3(ab) = (a'b)\sigma_3$ where $a' = \sigma_3 a$.
%
Note that $a' \notin A \cup B$ since otherwise $a' = \sigma_3 a'$ and hence $a'
= \sigma_3^{-1} a' = a \notin A \cup B$ which is a contradiction. There are two
cases to consider, depending on whether $a' \in D$ as follows.

If $a' \in D$ then let $\sigma'_2 = \sigma_2(a'b)$.
%
Then $\sigma'_2 c \neq c$ only if $c \in (B \cup D) \setminus A$, so that
$\sigma = \sigma_1 \sigma'_2 \sigma_3$ is a factorisation in the desired form.
%
On the other hand $a' \notin D$ then let $c \in D$ be such that $\sigma_2 \cdot
c \in D$, which exists since by assumption $|D| > |B|$.
%
Then $(a'b) = (a'c)(bc)(a'c)$.
%
Writing $c' = \sigma_2 \cdot c \in D$, then $\sigma = \sigma_1 (a'c') \sigma_2
(bc) (a'c) \sigma_3$.
%
Let $\sigma'_1 = \sigma_1 (a'c')$, $\sigma'_2 = \sigma_2 (bc)$ and $\sigma'_3 =
(a'c) \sigma_3$, then $\sigma = \sigma'_1 \sigma'_2 \sigma'_3$ is a
factorisation in the desired form.
%
\end{proof}

It will sometimes be useful to be able to extend an injection $i : s
\rightarrowtail \mathbb A$ into a permutation $\sigma_i : \mathbb A \to \mathbb
A$. This is always possible if $s$ is finite, although there will be many
possible choices for $\sigma_i$.

\begin{lemma} \label{lemma:injextension} If $s \subseteq_{\mathrm{fin}} \mathbb
A$ and $i : s \rightarrowtail \mathbb A$ is an injection then there exists a
permutation $\sigma_i$ such that that the restriction of $\sigma_i$ to $s$ is
$i$.  \end{lemma}

\begin{proof} The proof proceeds by induction on $|s|$.
%
If $s = \varnothing$ then any permutation will do for $\sigma_i$.
%
Now suppose that $a \notin s$ and $i : s \udot \{a\} \rightarrowtail \mathbb A$,
and let $i' = i|_s : s \rightarrowtail \mathbb A$.
%
By induction, there is a permutation $\sigma_{i'}$ extending $i'$ so define
$\sigma_i = (ia\ \sigma_{i'}a) \sigma_{i'}$.
%
It is immediate that $\sigma_i a = ia$.
%
Let $b \in s$, then $\sigma_i b = (ia\ \sigma_{i'} a) (i' b) = (ia\ \sigma_{i'}
a) (i b)$.
%
Certainly $ia \neq ib$ as $i$ is an injection, and $ib = i'b = \sigma_{i'} b$ so
that $\sigma_{i'} a \neq ib$ and hence $\sigma_i b = ib$ as required.
\end{proof}


\subsection{The Theory of Nominal Sets}
\label{subsect:nset:theory}

This section is a very short introduction to the theory of nominal sets.
%
More details and longer discussions are available elsewhere\cite{PittsAM:alpsri}.

\begin{definition} Write \define{$\mathcal G$} for the group of finite
permutations of $\mathbb A$. \end{definition}

\begin{definition} A \define{$\mathcal G$-set} is a set $X$ together with an
$\mathcal G$-action, written as the infix operator $\cdot_X$ or more commonly
simply $\cdot$ where the ambient set is clear from the context. \end{definition}

A $\mathcal G$-set is conceptually a set whose elements `use names'.
%
The action of a particular permutation on an element $x$ of a $\mathcal G$-set
is therefore the action of permuting the names that $x$ uses.
%
A $\mathcal G$-action is enough to capture the concept of `using' names without
needing to refer to syntax as follows.

\begin{definition} A set $s \subseteq \mathbb A$ is said to \define{support} $x
\in X$ (and $x$ is said to \define{have support} $s$) if for any permutation
$\sigma$ such that $\sigma a = a$ for all $a \in s$ it is the case that $\sigma
\cdot x = x$. \end{definition}

Conceptually, $s$ supports $x$ if $s$ is an upper bound for the set of names
that $x$ uses.
%
The elements of interest use only finitely many names and in this case it is
possible to find a smallest possible support.

\begin{lemma} \label{lemma:smallestsupport} If $x \in X$ has a finite support
then $\bigcap \{ s \subseteq_{\mathrm{fin}} \mathbb A \mid \text{$s$ supports
$x$} \}$ supports $x$.  \end{lemma}

\begin{proof} It is sufficient to show that if $s$ and $s'$ are finite supports
of $x$ then $s \cap s'$ also supports $x$.
%
Let $a, b \in \mathbb A \setminus (s \cap s')$.
%
If $a, b \in \mathbb A \setminus s$ then $(ab) \cdot x = x$ since $s$ supports
$x$.
%
Similarly if $a, b \in \mathbb A \setminus s'$ then $(ab) \cdot x = x$ too.
%
Therefore without loss of generality suppose that $a \in s \setminus s'$ and $b
\in s' \setminus s$.
%
Let $c \in \mathbb A \setminus (s \cup s')$, then $(ac) \cdot x = x$ and $(bc)
\cdot x = x$, so that $(ab) \cdot x = (ac) \cdot (bc) \cdot (ac) \cdot x = x$ as
required.
%
More generally, let $\sigma$ be a permutation such that $\sigma a = a$ for all
$a \in s \cap s'$, then by lemma \ref{lemma:automorphism:permutation} $\sigma$
may be represented as a string of transpositions $(a b)$ where $a, b \notin s
\cap s'$.
%
By induction, using the argument above, $\sigma \cdot x = x$ and hence $s \cap
s'$ supports $x$ as required.  \end{proof}

\begin{definition} A $\mathcal G$-set $X$ is a \define{nominal set} if every $x
\in X$ has a finite support.  \end{definition}

\begin{definition} In the light of lemma \ref{lemma:smallestsupport} if $X$ is a
nominal set and $x \in X$ then define $\supp{x}$ to be the smallest finite
support of $x$, that is, \[\supp{x} \defeq \bigcap \{ s \subseteq_{\mathrm{fin}}
\mathbb A \mid \text{$s$ supports $x$} \}.\] \end{definition}

\begin{definition} If $X$ and $Y$ are nominal sets and $x \in X$ and $y \in Y$
then say $x$ \define{is fresh for} $y$ and write `$x \freshfor y$' iff $\supp{x}
\cap \supp{y} = \varnothing$.\end{definition}

\subsubsection{Notation.} For the remainder of this dissertation the symbol $s$
and its relatives $s'$, $s''$, $s_1$, $s_i$, etc. always refer to
\textit{finite} subsets of $\mathbb A$.
%
This convention will save a great deal of repetition.

\subsection{Constructing Nominal Sets}
\label{subsect:nset:examples}

It is worth discussing some examples of nominal sets.

\subsubsection{Discrete nominal sets.}
%
Any set may be given the trivial $\mathcal G$-action $\sigma \cdot x = x$ and
with respect to this action every element has empty support. A set with the
trivial $\mathcal G$-action is called a discrete nominal set.

\subsubsection{The set of names.}
%
The set $\mathbb A$ is a nominal set with permutation action given by $\sigma
\cdot a \defeq \sigma a$.  This is clearly a group action, and it is
straightforward to show that every $a \in \mathbb A$ is supported by the finite
set $\{a\}$. Therefore $\supp{a} = a$ and $a \freshfor b$ iff $a \neq b$.

\subsubsection{The set of permutations of names.}
%
The group $\mathcal G$ is a nominal set, with permutation action given by
$\sigma \cdot \sigma' \defeq \sigma \sigma' \sigma^{-1}$.
%
It is not hard to see that this is a group action.
%
Furthermore, $\supp{\sigma} = \{ a \in \mathbb A \mid \sigma a \neq a \}$ as
follows.
%
Suppose that $\sigma' a = a$ for all $a \in \mathbb A$ such that $\sigma a \neq
a$, then it is required to show that $\sigma' \cdot \sigma \defeq \sigma' \sigma
{\sigma'}^{-1} = \sigma$.
%
Let $a \in \mathbb A$ and suppose that $\sigma' a \neq a$, then ${\sigma'}^{-1}
a \neq a = \sigma' {\sigma'}^{-1} a$ so that ${\sigma'}^{-1} a = \sigma
{\sigma'}^{-1} a$.
%
Therefore $(\sigma' \cdot \sigma) a = \sigma' {\sigma'}^{-1} a = a$. Also if
$\sigma' a \neq a$ then $\sigma a = a$ so that $(\sigma' \cdot \sigma) a =
\sigma a$ as required.
%
On the other hand suppose that $\sigma' a = a$, then ${\sigma'}^{-1} a = a$ too.
%
If $\sigma a = a$ then $(\sigma' \cdot \sigma) a = a = \sigma a$, and if $\sigma
a \neq a$ then $\sigma \sigma a \neq \sigma a$ so that $\sigma' \sigma a =
\sigma a$ and hence $(\sigma' \cdot \sigma) a = a = \sigma a$ as required.
%
Therefore $\sigma$ is supported by $\{a \in \mathbb A \mid \sigma a \neq a \}$.
%
Furthermore, this is the smallest support: pick any $a$ and $b$ such that
$\sigma a \neq a$ and $\sigma b = b$ then it is certainly the case that $(ab)
\cdot \sigma \neq \sigma$ so that $a \in \supp{\sigma}$.

\subsubsection{Products and sums.}
%
If $X$ and $Y$ are nominal sets then their product $X \times Y$ and their sum $X
+ Y$ are both nominal sets, with permutation actions given componentwise. The
support of a pair $\langle x, y \rangle \in X \times Y$ is $\supp{x} \cup
\supp{y}$.

\subsubsection{Subsets.}
%
If $X$ is a nominal set and $Y \subseteq X$ is closed under the action of
$\mathcal G$ then $Y$ is also a nominal set with respect to this action.

\subsubsection{Nominal powersets.}
%
If $X$ is a nominal set then its powerset $\mathcal P X$ has a natural $\mathcal
G$-action given by \begin{equation} \sigma \cdot A \defeq \{ \sigma \cdot x \mid
x \in A \}. \end{equation}
%
However in general not every subset of $X$ has finite support with respect to
this action.
%
For example, consider some $A \subseteq \mathbb A$ which is neither finite nor
has finite complement, then $A$ does not have a finite support.
%
To see this, suppose that $A$ is supported by a set $s \subseteq \mathbb A$. If
there exists $a \in A \setminus s$ and $b \in \mathbb A \setminus (A \cup s)$
then $(ab) \cdot A \neq A$ which contradicts that $s$ supports $A$, so either $A
\setminus s = \varnothing$ or $\mathbb A \setminus (A \cup s) = \varnothing$. If
$A \setminus s = \varnothing$ then $A \subseteq s$ and hence $s$ is infinite,
whereas if $\mathbb A \setminus (A \cup s) = \varnothing$ then $A \cup s =
\mathbb A$ and hence $\mathbb A \setminus A \subseteq s$ so that $s$ is infinite
in this case as well.

However, $\mathcal P X$ does contain a nominal set, \begin{equation}
\mathcal{P}_{\mathrm{fs}}(X) \defeq \{ A \subseteq X \mid \text{$A$ has finite
support} \}. \end{equation} It is not hard to see that if $A \subseteq X$ is
supported by $s$ then $\sigma \cdot A$ is supported by $\{ \sigma a \mid a \in
s\} = \sigma \cdot s$ so that $\mathcal{P}_{\mathrm{fs}} X$ does have a
$\mathcal{G}$-action.
%
Notice that any finite subset of $X$ is supported by the union of the supports
of its elements (which is finite) and therefore $\mathcal P_{\mathrm{fin}} X$ is
also a nominal set.

\subsubsection{Nominal function spaces.}
%
If $X$ and $Y$ are nominal sets then the function space $X \to Y$ is a subset of
$\mathcal P(X \times Y)$, where the derived $\mathcal{G}$-action becomes
\begin{equation} (\sigma \cdot f)x \defeq \sigma \cdot \bigl( f(\sigma^{-1}
\cdot x) \bigr). \end{equation} In general a function $f : X \to Y$ does not
have finite support: if $A \subseteq \mathbb A$ is infinite and has infinite
complement then its characteristic function $\chi_A : \mathbb A \to \mathbf{2}$
has no finite support by the same argument as before. Again, $X \to Y$ does
contain a nominal set, \begin{equation} \label{def:fsfunction} X
\to_{\mathrm{fs}} Y \defeq \{ f : X \to Y \mid \text{$f$ has finite support} \}.
\end{equation}
%
It is not hard to see that if $s$ supports $f$ then $\sigma \cdot s$ supports
$\sigma \cdot f$ so that $X \to_{\mathrm{fs}} Y$ does have a well-defined
$\mathcal{G}$-action.

\begin{definition} A function $f : X \to Y$ between nominal sets is
\define{equivariant} iff it has empty support. \end{definition}

If $f$ is equivariant then $\sigma^{-1} \cdot f = f$ so that for all $x \in X$,
$f x = (\sigma^{-1} \cdot f) x = \sigma^{-1} \cdot \bigl( f (\sigma x) \bigr)$
and hence \begin{equation} \label{def:eqvt} \sigma \cdot (f x) = f (\sigma \cdot
x). \end{equation}
%
The converse also holds.
%
There are many equivariant functions. It is not hard to see that the support
function $\mathrm{supp} : X \to \mathcal{P}_{\mathrm{fs}} \mathbb A$ is
equivariant: $\sigma \cdot \supp{x} = \supp{\sigma \cdot x}$. The identity
function $\mathbf{1}_{X}$ is equivariant.  Composition is equivariant: $\sigma
\cdot (g \circ f) = (\sigma \cdot g) \circ (\sigma \cdot f)$. The projections $X
\times Y \to X$ and injections $X \to X + Y$ are equivariant. Function
application is equivariant: $\sigma \cdot (f x) = (\sigma \cdot f) (\sigma \cdot
x)$. 

Certain predicates also exhibit an equivariance property. For example,
freshness, set membership and the subset relation are equivariant: $x \freshfor
y$ iff $(\sigma \cdot x) \freshfor (\sigma \cdot y)$, $x \in A$ iff $\sigma
\cdot x \in \sigma \cdot A$ and $A \subseteq A'$ iff $\sigma \cdot A \subseteq
\sigma \cdot A'$.

The remainder of this discussion will barely mention the fact that any
particular object that has been constructed is finitely supported.
%
This is justified by the following principle.

\begin{theorem}[Finite Support Principle, cf. {\cite[Theorem
3.5]{PittsAM:alpsri}}] \label{finitesupport} Any function or relation that is
defined from finitely supported functions and relations using higher-order,
classical logic without choice principles, is itself finitely supported.
\end{theorem}

\subsection{A Category of Nominal Sets}
\label{subsect:nset:category}

\begin{definition} The category \define{$\mathbf{NSet}$} has nominal sets for
objects and equivariant functions for arrows. \end{definition}

It is reasonably clear that the composition of equivariant functions is
equivariant, so this does define a category.  Furthermore, it has products
$\times$, coproducts $+$ and exponentials $\to_{\mathrm{fs}}$ given as above,
and to cut a long story short it is also a Boolean topos: the subobject
classifier is the discrete nominal set on $\mathbf{2} \defeq \{ \top, \bot\}$.

\begin{lemma} \label{lemma:schequiv} Let $\mathbb I$ be the category whose
objects are finite subsets of $\mathbb A$ and whose arrows are injections
between them. Then the category $\mathbf{NSet}$ is equivalent to the full
subcategory $\mathbf{Sch}$ of $\mathbf{Set}^{\mathbb I}$ consisting of those
presheaves that preserve pullbacks.\end{lemma}

\begin{proof}[Sketch Proof] A functor $F: \mathbf{NSet} \to \mathbf{Sch}$ is
defined by \begin{equation} F X s \defeq \{ x \in X \mid \text{$s$ supports $x$}
\}, \end{equation} where if $i : s \rightarrowtail s'$ then there is some
permutation $\sigma_i$ that extends $i$, so define $F i(x) \defeq \sigma_i \cdot
x$.  Note that there are many choices for $\sigma_i$ but this definition is
independent of this choice, because if $\sigma_i$ and $\sigma'_i$ both extend
$i$ then $\sigma_i^{-1} \sigma'_i \freshfor s$ and $s$ supports $x$ so that
$\sigma_i^{-1} \cdot \sigma'_i \cdot x = x$ and hence $\sigma_i \cdot x =
\sigma'_i \cdot x$.

A functor $G : \mathbf{Sch} \to \mathbf{NSet}$ is defined by \begin{equation} G
X \defeq \mathrm{colim} (X |_{\mathbb J}) \end{equation} where the colimit is
taken over the restriction of $X$ to a diagram of shape $\mathbb J$, which is
the category whose objects are finite subsets of $\mathbb A$ but whose arrows
are just the inclusions between them. The action of $G$ on morphisms is given by
the universal property of this colimit.

There are obvious transformations $\mathbf{1} \to FG$ and $\mathbf{1} \to GF$
which essentially take elements to their equivalence classes in the colimit.
%
It is straightforward to show that these are natural isomorphisms and hence that
$F$ and $G$ define an equivalence of categories as required.  \end{proof}

\subsection{Binding in Nominal Sets}
\label{subsect:nset:binding}

The syntactic notion of a binding operator is captured semantically by the
following condition.
%
Pitts\cite{PittsAM:alpsri} demonstrates that this is effectively the condition
that is needed to be able to define functions by purely structural recursion
over a syntactic signature with binding.

\begin{definition} \label{def:FCB} If $X$ is a nominal set and $f : \mathbb A
\to X$ is a finitely supported function then $f$ satisfies the \define{freshness
condition for binders} (FCB) if there exists $a \in \mathbb A$ such that $a
\freshfor f$ and $a \freshfor f a$. \end{definition}

\begin{lemma} \label{lemma:FCB} If $f : \mathbb A \to X$ satisfies the FCB then
there exists a unique $x \in X$ such that for any name $a \freshfor f$, $f a =
x$. \end{lemma}

\begin{proof} Since $f$ satisfies the FCB let $a \in \mathbb A$ be such that $a
\freshfor f$ and $a \freshfor f a$.
%
Let $b \freshfor f$ and let $c \freshfor (f, a, b)$.
%
If $a = b$ then $f a = f b$ trivially, so suppose that $a \neq b$.
%
Then \begin{equation} \begin{array}[t]{rcl} f b &=& (ab) \cdot (f a) \quad \text{as
$a \freshfor f$ and $b \freshfor f$} \\
%
&=& (ac) \cdot (bc) \cdot (ac) \cdot (f a) \\
%
&=& (ac) \cdot (bc) \cdot (f a) \quad \text{as $a \freshfor fa$ and $c \freshfor
(f, a)$} \\
%
&=& (ac) \cdot (f a) \quad \text{as $b \freshfor f$ and $a \neq b$ and $c
\freshfor (f, a)$} \\
%
&=& f a \quad \text{as $a \freshfor f a$ and $c \freshfor (f, a)$} \\
\end{array} \end{equation} so that $f a$ is the unique element of $X$ as
required.\end{proof}

\begin{definition} \label{def:freshin} If $f : \mathbb A \to X$ satisfies the
FCB then write $\freshin{b}{f b}$ for the unique $x \in X$ such that for any
name $b \freshfor f$ it is the case that $f b = x$.  \end{definition}

When performing calculations involving terms of the form $\freshin{b}{f b}$, it
will be common to pick a particular name $b$ that is fresh for $f$ and calculate
using $f b$.
%
Everything in the remainder of this discussion is finitely supported so it is
always possible to simply pick a name that is asserted to be `fresh', which
means that it is fresh for everything that has already been mentioned.
%
It will also normally be clear that the $f$ used in the term $\freshin{b}{f b}$
does satisfy the FCB, so this fact will rarely be mentioned.
%
The following lemma illustrates a simple calculation using
$\freshin{\ldots}{\ldots}$.

\begin{lemma} \label{lemma:freshfresh} Let $f : \mathbb A \to X$, $g : \mathbb A
\to Y$ and $h : X \to Y \to Z$ be finitely-supported functions such that $f$ and
$g$ satisfy the FCB.  Then \[h\ (\freshin{a}{f a})\ (\freshin{b}{g b}) =
\freshin{c}{\bigl(h\ (f c)\ (g c)\bigr)}. \] \end{lemma}

\begin{proof} Let $d$ be a fresh name (i.e. $d \freshfor f, g, h$). Then
$\freshin{a}{f a} = f d$ and $\freshin{b}{g b} = g d$, and $\freshin{c}{\bigl(h\
(f c) \ (g c)\bigr)} = h\ (f d)\ (g d)$ as required.  \end{proof}

Note that if $X$ is a discrete nominal set then any finitely-supported $f$
satisfies the FCB. In particular if $f$ is a finitely-supported predicate on
$\mathbb A$ and hence a function $\mathbb A \to \mathbf{2}$ then it satisfies
the FCB. In this case, $\freshin{a}{fa} =
{\reflectbox{\ensuremath{\mathsf{N}}}}a. f a$ where
${\reflectbox{\ensuremath{\mathsf{N}}}}$ is the `new' quantifier of Pitts and
Gabbay\cite{PittsAM:newaas-jv}.

There is a symmetric monoidal structure $\otimes$ on $\mathbf{NSet}$. 
%
Via the equivalence of lemma \ref{lemma:schequiv} it can be characterised
abstractly as the Day tensor\cite{day:closedcats} of functors $\mathbb I \to
\mathbf{Set}$.
%
Concretely, if $X$ and $Y$ are nominal sets then \begin{equation}
\label{def:otimes} X \otimes Y \defeq \{ \langle x, y \rangle \in X \times Y
\mid x \freshfor y \}  \end{equation} with the action on arrows given
componentwise.
%
Since $\otimes$ is the Day tensor, $\mathbf{NSet}$ is closed with respect to it.
%
In fact this discussion will only use this tensor as part of the functor $(-)
\otimes \mathbb A$ and it is possible to characterise its right adjoint, written
$\delta$, as follows.
%
There is an equivalence relation $\sim_{\alpha}$ on $X \times \mathbb A$ that
captures the notion of $\alpha$-equivalence as \begin{equation}
\label{def:simalpha} \langle x, a \rangle \sim_{\alpha} \langle x', a' \rangle
\quad \Leftrightarrow_{\mathrm{def}} \quad \freshin{b}{(ab)\cdot x = (a'b) \cdot
x'}.  \end{equation}
%
Write the equivalence classes as $[a].x \defeq [\langle x, a
\rangle]_{\sim_{\alpha}}$, then \begin{equation} \label{def:deltanom:obj} \delta
X \defeq (X \times \mathbb A)/{\sim_\alpha} = \{ [a].x \mid a \in \mathbb A
\wedge x \in X \}
\end{equation}
%
Notice that $\supp{[a].x} = \supp{x} \setminus \{a\}$ and therefore $\delta X$
is a nominal set.

If $x' \in \delta X$ and $a \freshfor x'$ then define the \define{concretion}
$x'@a$ as the unique $x \in X$ such that $x' = [a].x$.
%
To see that there exists such an $x$ note that $x' = [b].y$ for some $b \in
\mathbb A$ and some $y \in X$, so if $c$ is a fresh name then $(ac) \cdot (ab)
\cdot y = (bc) \cdot y$ and hence $[a].((ac) \cdot y) = [b].y$

If $f : X \to Y$ is an equivariant function and $x' \in \delta X$ then
\begin{equation} \label{def:deltanom:arrow} (\delta f) x' \defeq
\freshin{b}{[b].(f(x'@b))}. \end{equation}
%
It is straightforward to check that $\delta$ so defined is a functor on
$\mathbf{NSet}$.

The unit of the adjunction $(-)\otimes \mathbb A \dashv \delta$ is the natural
transformation $\xi : \mathbf{1} \to \delta ((-) \otimes \mathbb A)$ defined by
\begin{equation} \xi_X(x) \defeq \freshin{a}{[a].\langle x, a \rangle}.
\end{equation}
%
The counit is the concretion operator $\mathord{@} : (\delta-) \otimes \mathbb A
\to \mathbf{1}$ defined above.
%
That the triangular identities are satisfied amounts to saying that $([a].x)@a =
x$ for any name $a$, and $[b].(x'@b) = x'$ for a fresh name $b$.

\TODO{Conclusion. In particular, say why this is ``binding''}

% vim: set filetype=tex foldlevel=0 cms=\%%s nowrap tw=80:
