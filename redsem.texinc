\subsection{Reduction Semantics}

That a closed term $t$ of type $\typeP$
may reduce in a single step to $t'$ is written
$\rjudge{t}{t'}$.

The reduction semantics are defined as follows.
%
\[\begin{array}{ccccc}
% ===========================================================================
%                                      REC
\infer
{\rjudge{\rec{x}{t}}{\termsubst{t}{\rec{x}{t}}{x}}}
{-} 
% ===========================================================================
\\
% ===========================================================================
%                                      NAMEMATCH-BETA
\multicolumn{5}{c}{
\rule{0pt}{8ex} 
\infer[a \freshfor t]
{\rjudge{\genmatch{\new{a}{u}}{\newaction{a}{\multinewaction{s}{\bangaction}}}{x}{t}}
{\new{a}{\genmatch{u}{\multinewaction{s}{\bangaction}}{x}{t}}}}
{-}}
% ===========================================================================
\\ \rule{0pt}{8ex} 
% ===========================================================================
%                                      PREFMATCH-BETA
\infer
{\rjudge{\prefmatch{\bang{u}}{x}{t}}{\termsubst{t}{u}{x}}}
{-}
% ===========================================================================
&&
% ===========================================================================
%                                      BETA
\infer 
{\rjudge{\apply{\abstract{x}{t}}{u}}{\termsubst{t}{u}{x}}}
{-}
% ===========================================================================
&&
% ===========================================================================
%                                      LABEL
\infer 
{\rjudge{\lproj{\ell}{\linj{\ell}{t}}}{t}}
{-}
% ===========================================================================
\\ \rule{0pt}{8ex} 
&&&&
% ===========================================================================
%                                      LABEL-MISMATCH
\infer[\ell \ne \ell']
{\rjudge{\lproj{\ell}{\linj{\ell'}{t}}}{\inactive}}
{-}
% ===========================================================================
\\ \rule{0pt}{8ex} 
% ===========================================================================
%                                      PREFMATCH-NIL
\infer
{\rjudge{\prefmatch{\inactive}{x}{t}}{\inactive}}
{-}
% ===========================================================================
&&
% ===========================================================================
%                                      BETA-NIL
\infer 
{\rjudge{\apply{\inactive}{u}}{\inactive}}
{-}
% ===========================================================================
&&
% ===========================================================================
%                                      LABEL-NIL
\infer 
{\rjudge{\lproj{\ell}{\inactive}}{\inactive}}
{-}
% ===========================================================================
\\ \rule{0pt}{8ex} 
% ===========================================================================
%                                      PREFMATCH-UNDER-1
\infer
{\rjudge{\prefmatch{u}{x}{t}}{\prefmatch{u'}{x}{t}}}
{\rjudge{u}{u'}}
% ===========================================================================
&& 
% ===========================================================================
%                                      APPLY-UNDER
\infer 
{\rjudge{\apply{t}{u}}{\apply{t'}{u}}}
{\rjudge{t}{t'}}
% ===========================================================================
&&
% ===========================================================================
%                                      LPROJ-UNDER
\infer 
{\rjudge{\lproj{\ell}{t}}{\lproj{\ell}{t'}}}
{\rjudge{t}{t'}}
% ===========================================================================
\\ \rule{0pt}{8ex} 
% ===========================================================================
%                                      NDSUM
\infer[i_0 \in I]
{\rjudge{\ndsum{i}{I}{t_i}}{t_{i_0}}}
{-}
% ===========================================================================
\\ \rule{0pt}{8ex}
\end{array}\]

\begin{lemma}\label{reductionspreservetypes}
If $\rjudge{t}{t'}$ and $\tjudge{\Gamma}{t}{\typeP}$ then
$\tjudge{\Gamma}{t'}{\typeP}$.
\end{lemma}

% Proof of reductionspreservetypes {{{
\begin{proof}
The proof is by induction on the reduction semantics. 

If $\tjudge{\Gamma}{\rec{x}{t}}{\typeP}$ then
$\tjudge{\envcombine{\envvar{x}{\typeP}}{\Gamma}}{t}{\typeP}$.
Therefore by lemma \ref{substlemma},
$\tjudge{\envcombine{\Gamma}{\Gamma}}{\termsubst{t}{\rec{x}{t}}{x}}{\typeP}$,
so by contraction $\tjudge{\Gamma}{\termsubst{t}{\rec{x}{t}}{x}}{\typeP}$
as required.

If $\tjudge{\Gamma}{\prefmatch{\bang{u}}{x}{t}}{\typeP}$ then
$\tjudge{\Lambda}{\bang{u}}{\typelift\typeQ}$ for some environment $\Lambda$
such that $\Gamma = \envsubst{\Gamma_0}{\Lambda}{x_0}$, and hence
$\tjudge{\Lambda}{u}{\typeQ}$. Moreover,
$\tjudge{\envsubst{\Gamma_0}{\envvar{x}{\typeQ}}{x_0}}{t}{\typeP}$, so by
lemma \ref{substlemma}, $\tjudge{\Gamma}{\termsubst{t}{u}{x}}{\typeP}$ as
required.

If $\tjudge{\Gamma}{\apply{\abstract{x}{t}}{u}}{\typeP}$ then
$\tjudge{\Lambda}{\abstract{x}{t}}{\typelinmap{\typeQ}{\typeP}}$ for some
environment $\Lambda$ such that $\Gamma = \envcombine{\Lambda}{\Lambda'}$ and
hence $\tjudge{\envcombine{\envvar{x}{\typeQ}}{\Lambda}}{t}{\typeP}$.
Moreover, $\tjudge{\Lambda'}{u}{\typeQ}$, so by lemma \ref{substlemma},
$\tjudge{\Gamma}{\termsubst{t}{u}{x}}{\typeP}$ as required.

If $\tjudge{\Gamma}{\lproj{\ell_0}{\linj{\ell_0}{t}}}{\typePsub{\ell_0}}$ then
$\tjudge{\Gamma}{\linj{\ell_0}{t}}{\stdtypesum}$ and hence
$\tjudge{\Gamma}{t}{\typePsub{\ell_0}}$ as required.

The cases where $t' = \inactive$ are immediate.

If $\tjudge{\Gamma}{\prefmatch{u}{x}{t}}{\typeP}$ then
$\tjudge{\Lambda}{u}{\typelift\typeQ}$ for some environment $\Lambda$.
Therefore by induction $\tjudge{\Lambda}{u'}{\typelift\typeQ}$ and hence
$\tjudge{\Gamma}{\prefmatch{u'}{x}{t}}{\typeP}$.

If $\tjudge{\Gamma}{\apply{t}{u}}{\typeP}$ then
$\tjudge{\Lambda}{t}{\typelinmap{\typeQ}{\typeP}}$ for some environment
$\Lambda$.  Therefore by induction
$\tjudge{\Lambda}{t'}{\typelinmap{\typeQ}{\typeP}}$ and hence
$\tjudge{\Gamma}{\apply{t'}{u}}{\typeP}$.

If $\tjudge{\Gamma}{\lproj{\ell_0}{t}}{\typePsub{\ell_0}}$ then
$\tjudge{\Gamma}{t}{\stdtypesum}$, and hence by induction
$\tjudge{\Gamma}{t'}{\stdtypesum}$. Therefore
$\tjudge{\Gamma}{\lproj{\ell_0}{t'}}{\typePsub{\ell_0}}$.

\end{proof}
% }}}

\begin{lemma}\label{reductionmonotonic}
If $\rjudge{t}{t'}$ then $\sem{\tjudge{}{t'}{\typeP}} \sqsubseteq
\sem{\tjudge{}{t}{\typeP}}$.
\end{lemma}

\begin{proof}
The proof is by induction on the reduction semantics. The first five cases
follow directly from lemma \ref{betasound}. The next four cases are trivial
since $\sem{\inactive}$ is the empty map. The next three cases follow by
induction, using monotonicity of composition. The final case follows since the
sum construction is defined as union.
\end{proof}


Let a \textit{value} be a term of one of the following forms: \[\bang{t}
\bigmid \abstract{x}{t} \bigmid \linj{\ell}{t} \bigmid \new{a}{t} \bigmid
\varnothing \] Let
$\evaluate$ be the reflexive transitive closure of $\reduce$. Write $t
\results v$ if $t \evaluate v$ and $v$ is a value.

\begin{lemma}\label{valueforms}
Suppose $t \results v \neq \inactive$. Then \begin{enumerate}
\item $\tjudge{\Gamma}{t}{\typelift\typeP}$ if and only if $v = \bang{t'}$ for
some $t'$ such that $\tjudge{\Gamma}{t'}{\typeP}$.
\item $\tjudge{\Gamma}{t}{\typelinmap{\typeQ}{\typeP}}$ if and only if $v =
\abstract{x}{t'}$ for some $t'$ such that $\tjudge{\envcombine{\envvar{x}{\typeQ}}{\Gamma}}{t'}{\typeP}$.
\item $\tjudge{\Gamma}{t}{\stdtypesum}$ if and only if $v = \linj{\ell_0}{t'}$
for some $t'$ such that $\tjudge{\Gamma}{t'}{\typePsub{\ell_0}}$.
\item $\tjudge{\Gamma}{t}{\typedelta\typeP}$ if and only if $v = \new{a}{t'}$
for some $t'$ such that $\tjudge{\Gamma}{t'}{\typeP}$.
\end{enumerate}
\end{lemma}

\begin{proof}
The 'if' directions of implication are clear from the typing rules. TODO
\end{proof}

\begin{lemma}\label{valuesarevalues}
If $t$ is a value then there exists no $t'$ such that $\rjudge{t}{t'}$
\end{lemma}

\begin{proof}
By inspection of the reduction semantics, if $\rjudge{t}{t'}$ then $t$ cannot
be a value.
\end{proof}

% vim: set filetype=tex foldlevel=0 cms=\%%s:
