\section{Syntax}
\label{syntax}

\subsection{Preliminaries}

Fix a set of (term) variables $\termvar{x}, \termvar{y}, \ldots$ and a set of
type variables $P, \ldots$, each with a discrete permutation action.
%
Also fix a set $\mathcal L$ of nominal label-sets, also with the discrete
permutation action.
%
Labels are written $\ell, \ell_0, \ldots \in L \in \mathcal L$.
%
Note that each $L \in \mathcal L$ does not necessarily have the discrete
permutation action, so that for some labels $\ell$ and some permutations
$\sigma$ it may be the case that $\sigma \cdot \ell \neq \ell$.

\subsection{Syntax of Types}

Types are given by the grammar \begin{equation} \typeP, \typeQ ::= \typevar{P}
\mid \typelift{\typeP} \mid \typemap{\typeQ}{\typeP} \mid \typedelta{\typeP}
\mid \stdtypesum \mid \typerec{j}{P}{\typeP}, \end{equation} where $P$ is a
type variable, $\vec{P}$ is a list of type variables, and
$\typerec{j}{P}{\typeP}$ binds $\vec{P}$.
%
A closed type is a type with no free variables, and in the following, closed
types are normally simply called `types'.
%
The permutation action on types is the discrete action: for all types $\typeP$
and permutations $\sigma$, $\sigma \cdot \typeP = \typeP$.
%
Intuitively, a process of type $\typelift{\typeP}$ may perform an anonymous
action --- written `$\bangaction$' and pronounced `bang' --- and resume as a
process of type $\typeP$.
%
A process of type $\typemap{\typeQ}{\typeP}$ awaits input of type $\typeQ$ and
acts as a process of type $\typeP$ on its receipt.
%
A process of type $\typedelta{\typeP}$ behaves as a process of type $\typeP$
with one of its names bound, which can be used to model the dynamic generation
of names.
%
A process of type $\stdtypesum$ behaves as any of its components
$\typePsub{\ell_0}$ with the actions of the process having been tagged by the
label $\ell_0$.
%
The recursively-defined type $\typerec{}{P}{\typeP}$ is isomorphic to its
unfolding $\typeP_j[\typerec{}{P}{\typeP}/\vec{P}]$ and so processes of
recursively-defined types behave similarly to processes typed by their
unfoldings.
%
For a more detailed intuition about this system of types, see the operational
semantics of Nominal HOPLA as described in section \ref{opsem}.

\subsection{Syntax of Environments}

Environments are given by the grammar \begin{equation} \Gamma ::= \envempty
\mid \envcombine{\Gamma}{\envvarfresh{x}{\typeP}{s}} \end{equation} 
where $\termvar{x}$ ranges
over variables, $\typeP$ ranges over types and $s$ ranges over finite sets of
names, and the variables in $\Gamma$ are distinct from $\termvar{x}$. The
intended meaning of $\envvarfresh{x}{\typeP}{s}$ is that the variable
$\termvar{x}$ takes values of type $\typeP$ that are assumed to be fresh for
$s$.  The set of environments may be equipped with a permutation action which
simply permutes the freshness assumptions: \begin{equation}
\sigma \cdot \envempty =
\envempty \qquad\text{and}\qquad \sigma \cdot
(\envcombine{\Gamma}{\envvarfresh{x}{\typeP}{s}}) = \envcombine{(\sigma \cdot
\Gamma)}{\envvarfresh{x}{\typeP}{(\sigma \cdot s)}}, \end{equation} so that the
support of an environment is the union of its freshness constraints.
%
This is a finite support, so the collection of environments forms a nominal
set.

Define $\envcombine{\Gamma}{\Lambda}$ by the obvious recursion \begin{equation}
\envcombine{\Gamma}{\envempty} = \Gamma \qquad\text{and}\qquad
\envcombine{\Gamma}{(\envcombine{\Lambda}{\envvarfresh{x}{\typeP}{s}})} =
\envcombine{(\envcombine{\Gamma}{\Lambda})}{\envvarfresh{x}{\typeP}{s} },
\end{equation} which only makes sense when the variables in $\Gamma$ and
$\Lambda$ are distinct.
%
It is sometimes useful to be able to simultaneously alter all the freshness
assumptions in an environment: define $\envfresh{\Gamma}{s}$ by
\begin{equation} \envfresh{\envempty}{s} = \envempty \qquad\text{and}\qquad
\envfresh{\bigl(\envcombine{\Gamma}{\envvarfresh{x}{\typeP}{s'}}\bigr)}{s} =
\envcombine{\envfresh{\Gamma}{s}}{\envvarfresh{x}{\typeP}{s' \cup s}},
\end{equation} and define $\envrestrict{\Gamma}{s}$ by \begin{equation}
\envrestrict{\envempty}{s} = \envempty \qquad\text{and}\qquad
\envrestrict{\bigl(\envcombine{\Gamma}{\envvarfresh{x}{\typeP}{s'}}\bigr)}{s} =
\envcombine{\bigl(\envrestrict{\Gamma}{s}\bigr)}{\envvarfresh{x}{\typeP}{s'
\cap s}}. \end{equation}
%
Finally, omit $\envempty$ where it is unambiguous to do so.
%
In particular, write $\envvarfresh{x}{\typeP}{s}$ for the single-variable
environment $\envcombine{()}{\envvarfresh{x}{\typeP}{s}}$.

\vfill\pagebreak

\subsection{Syntax of Terms}

Terms are given by the following grammar, where $\termvar{x}$ ranges over
variables, $a$ ranges over names, $s$ over finite sets of names, $p$ over
actions (see \ref{syn:actions}), $\ell$ over labels and $\typeP$ over types.
%
To build an intuition for this definition, it is worth studying it in parallel
with the typing rules in section \ref{tjudge} and the operational semantics as
defined in section \ref{opsem}.
%
\begin{equation} \begin{array}[t]{lclcl} t, u &::=&
%
\quad \termvar{x} \bigmid \rec{x}{t} &&\text{variables; recursion} \\
%
&&\bigmid \bang{t} \bigmid \matchz{s}{u}{p}{x}{t}{\typeP} && \text{prefixing;
matching}\\
%
&&\bigmid \abstract{x}{t} \bigmid \apply{t}{u}{\typeP} &&\text{abstraction and
application} \\
%
&&\bigmid \new{a}{t} \bigmid \newapply{t}{a} && \text{binding and concretion}\\
%
&&\bigmid \linj{\ell}{t} \bigmid \lproj{\ell}{t} && \text{labelling}\\
%
&&\bigmid \ndsum{i}{I}{t_i} && \text{nondeterminstic sum} \\
%
&&\bigmid \abs{t} \bigmid \rep{t} && \text{recursive types}\\ \end{array}
\end{equation} 
%(\TODO{Try superscript in syntax for match})
%
The forms \begin{equation} \rec{x}{t} \qquad \matchz{s}{u}{p}{x}{t}{\typeP}
\qquad \abstract{x}{t} \end{equation} all bind $\termvar{x}$ in $t$, and the
set of free variables of $t$ is defined in the usual way.

The nondeterministic sum may be over an infinite set $I$, but there are
constraints to ensure that it behaves properly: the mapping $i \mapsto t_i$ is
a finitely supported function from a nominal set $I$ to the set of terms, and
is such that there exists a finite set $X$ of variables such that for all $i$
the free variables of $t_i$ are contained in $X$.  Write $\inactive$ for the
term $\ndsum{i}{\varnothing} t_i$.

Although the binding of variables is treated informally, the binding of the
name $a$ in the form $\new{a}{t}$ must be treated more carefully. Strictly
speaking, the form $\new{a}{t}$ is the equivalence class of pairs of names and
terms that contains $(a, t)$ under the usual $\alpha$-equivalence relation
\begin{equation} (a, t) \sim (a', t') \quad\Leftrightarrow\quad \freshin{b}{
(ab) \cdot t = (a'b) \cdot t'}. \end{equation}
%
Therefore for any fresh name $b$,
$\new{a}{t} = \new{b}{(ab) \cdot t}$, where the equality in this statement is
literally equality, not simply equivalence-up-to-$\alpha$.

\subsection{Syntax of Actions} \label{syn:actions}

The operational semantics of Nominal HOPLA, as defined in section \ref{opsem},
is given in the style of a labelled transition system.
%
The grammar of actions, labelling the transitions in the operational semantics,
is given as follows.
%
The symbol $t$ ranges over closed terms, $a$ ranges over names and $\ell$ over
labels.  \begin{equation} \begin{array}[t]{lclcl} p &::=& \quad \bangaction
&\qquad&\text{prefixing} \\
%
&&\bigmid \labelaction{\ell}{p} && \text{labelled actions}\\
%
&&\bigmid \mapaction{t}{p} &&\text{higher-order actions} \\
%
&&\bigmid \absaction{p} && \text{recursive type actions}\\
%
&&\bigmid \newaction{a}{p} && \text{new name actions}\\ \end{array}
\end{equation} The form $\newaction{a}{p}$ binds the name $a$ in the same way
that $a$ is bound in the term $\new{a}{t}$.

\subsection{Permutations on Terms and Actions}

Naturally enough, actions and terms form nominal sets where the permutation
action is given by a straightforward structural recursion as follows.
\begin{equation} \begin{array}[t]{rclcrcl} \sigma \cdot \termvar{x} &=& \termvar{x} &&
%
\sigma \cdot (\rec{x}{t}) &=& \rec{x}{(\sigma \cdot t)} \\
%
\sigma \cdot (\bang{t}) &=& \bang{(\sigma \cdot t)} &&
%
\sigma \cdot \left(\ndsum{i}{I}{t_i}\right) &=& \ndsum{i}{I}{(\sigma \cdot
t_i)} \\
%
\multicolumn{7}{c}{\sigma \cdot (\matchz{s}{u}{p}{x}{t}{\typeP}) =
\matchz{(\sigma \cdot s)}{(\sigma \cdot u)}{(\sigma \cdot
p)}{x}{(\sigma \cdot t)}{\typeP}} \\
%
\sigma \cdot (\abstract{x}{t}) &=& \abstract{x}{(\sigma \cdot t)} &&
%
\sigma \cdot (\apply{t}{u}{\typeP}) &=& \apply{(\sigma \cdot t)}{(\sigma \cdot u)}{\typeP} \\
%
\sigma \cdot (\new{a}{t}) &=& \new{(\sigma a)}{(\sigma \cdot t)} &&
%
\sigma \cdot (\newapply{t}{a}) &=& 
\newapply{(\sigma \cdot t)}{(\sigma a)} \\
%
\sigma \cdot (\linj{\ell}{t}) &=& \linj{(\sigma \cdot \ell)}{(\sigma \cdot t)} &&
%
\sigma \cdot (\lproj{\ell}{t}) &=& \lproj{(\sigma \cdot \ell)}{(\sigma \cdot t)} \\
%
\sigma \cdot (\abs{t}) &=& \abs{(\sigma \cdot t)} &&
%
\sigma \cdot (\rep{t}) &=& \rep{(\sigma \cdot t)} \\
%
\\
%
\sigma \cdot \bangaction &=& \bangaction &&
%
\sigma \cdot (\labelaction{\ell}{p}) &=& \labelaction{(\sigma \cdot \ell)}{(\sigma \cdot p)} \\
%
\sigma \cdot (\mapaction{t}{p}) &=& \mapaction{(\sigma \cdot t)}{(\sigma \cdot p)} &&
%
\sigma \cdot (\newaction{a}{p}) &=& \newaction{(\sigma \cdot a)}{(\sigma \cdot p)} \\
%
\sigma \cdot (\absaction{p}) &=& \absaction{(\sigma \cdot p)} \\
\end{array} \end{equation}

% vim: set filetype=tex foldlevel=0 cms=\%%s tw=0 nowrap:
