\section{Typing Rules}
\label{tjudge}

Nominal HOPLA is a strongly typed language, and its terms and actions are typed
as defined in this section.
%
This definition is mutually recursive, since the term
$\matchz{s'}{u}{q}{x}{t}{\typeQp}$ contains the action $q$ and the action
$\mapaction{u}{p}$ contains the term $u$.
%
However for the sake of clarity it is presented here as two separate type
systems (one for terms and the other for actions) with each assuming that the
other is already defined.

\subsection{Typing Rules for Terms}

Terms of Nominal HOPLA are typed with judgements of the form
$\tjudge{s}{\Gamma}{t}{\typeP}$, where $\Gamma$ is an environment, $s$ is a
finite set of names, $t$ is a term and $\typeP$ is a type.
%
The type $\typeP$ describes the actions that the term may perform.
%
The environment $\Gamma$ records types (and freshness assumptions) for the
variables of $t$.
%
The set $s$ represents the `current' set of names, and records a bound on the
support of the typing judgement, which helps to give a clean presentation of
the denotational semantics.
%
However, lemma \ref{typerestrictsupport} below demonstrates that it is not
strictly necessary to include this information, since a suitable $s$ may
inferred from the rest of the typing judgement.

\subsubsection{Variable.} A bare variable is typed by the environment in the obvious fasion.
\[
\infer{\tjudge{\varnothing}{\envvarfresh{x}{\typeP}{\varnothing} }{\termvar{x}}{\typeP}}{-}
\]

\subsubsection{Weakening.} The environment may be extended with extra variables.
\[
\infer{\tjudge{s}{\envcombine{\Gamma}{\envvarfresh{x}{\typeQ}{\varnothing} }}{t}{\typeP}}
{\tjudge{s}{\Gamma}{t}{\typeP}}
\]

\subsubsection{Exchange.} Two variables in the environment may be exchanged.
\[
\infer
{\tjudge{s}{\envcombine{\envcombine{\Gamma}{\envcombine{\envvarfresh{x1}{\typeQ {}_1}{s_1}} {\envvarfresh{x2}{\typeQ {}_2}{s_2} }} }{\Lambda}}{t}{\typeP}}
{\tjudge{s}{\envcombine{\envcombine{\Gamma}{\envcombine{\envvarfresh{x2}{\typeQ {}_2}{s_2}} {\envvarfresh{x1}{\typeQ {}_1}{s_1} }} }{\Lambda}}{t}{\typeP}}
\]

\subsubsection{Contraction.} It is possible to replace a pair of variables (with equal types) with a single variable.
\[
\infer
{\tjudge{s}{\envcombine{\Gamma}{\envvarfresh{x1}{\typeQ}{{s'}} }}{\termsubst{t}{\termvar{x2}}{x1}}{\typeP}}
{\tjudge{s}{\envcombine{\Gamma}{\envcombine{\envvarfresh{x1}{\typeQ}{s'}}{\envvarfresh{x2}{\typeQ}{s'}} }}{t}{\typeP}}
\]

\subsubsection{Fresh-Weakening.} It is possible to impose extra freshness assumptions on a variable.
\[
\infer[(s'' \subseteq s' \subseteq s)]
{\tjudge{s}{\envcombine{\Gamma}{\envvarfresh{x}{\typeQ}{s'} }}{t}{\typeP}}
{\tjudge{s}{\envcombine{\Gamma}{\envvarfresh{x}{\typeQ}{s''} }}{t}{\typeP}} 
\]

\subsubsection{Support-Weakening (Terms).} It is possible to extend the `current' set $s$ of names.
\[
\infer[(s' \subseteq s)]
{\tjudge{s}{\Gamma}{t}{\typeP}}
{\tjudge{s'}{\Gamma}{t}{\typeP}}
\]

\subsubsection{Prefix.} The term constructor $\bang{}$ takes a term $t$ to a
term $\bang{t}$ that intuitively may perform an anonymous action $\bangaction$
and resume as $t$.
%
The possible action $\bangaction$ is recorded in the type information.
\[
\infer{\tjudge{s}{\Gamma}{\bang{t}}{\typelift\typeP}}
{\tjudge{s}{\Gamma}{t}{\typeP}}
\]

\subsubsection{Match.} A term of the form $\matchz{s'}{u}{q}{x}{t}{\typeQp}$
intuitively matches the output of $u$ against the action $q$ and feeds the
resumption of $u$ into the variable $\termvar{x}$ in $t$.
%
If $\termvar{x}$ has some freshness assumptions imposed on it then $u$ and $q$
must satisfy those assumptions.
\[
\infer[(s'' \subseteq s \setminus s')]
{\tjudge{s}{\envcombine{\Gamma}{\envfresh{\Lambda}{s'} }}
	{\matchz{s'}{u}{q}{x}{t}{\typeQp}}{\typeP}}
{\tjudge{s}{\envcombine{\Gamma}{\envvarfresh{x}{\typeQp}{s'} }}{t}{\typeP} &
\tjudge{s''}{\Lambda}{u}{\typeQ} & \atjudge{s''}{\typeQ}{q}{\typeQp} }
\]

\subsubsection{Recursion.} A term of the form $\rec{x}{t}$ intuitively acts as
its unfolding $\termsubst{t}{\rec{x}{t}}{x}$, so that $\termvar{x}$ must be of
the same type as $t$.
\[
\infer{\tjudge{s}{\Gamma}{\rec{x}{t}}{\typeP}}
{\tjudge{s}{\envcombine{\Gamma}{\envvarfresh{x}{\typeP}{\varnothing} }}{t}{\typeP}}
\]

\subsubsection{Function Abstraction and Application.} A term $t$ of type
$\typeP$ may be abstracted with respect to the free variable $\termvar{x}$ of
type $\typeQ$ to leave a term $\abstract{x}{t}$ of type
$\typemap{\typeQ}{\typeP}$ that can be applied to a term of type $\typeQ$ in
the usual fashion.
\[
\infer{\tjudge{s}{\Gamma}{\abstract{x}{t}}{\typemap{\typeQ}{\typeP} }}
{\tjudge{s}{\envcombine{\Gamma}{\envvarfresh{x}{\typeQ}{\varnothing} }}{t}{\typeP}} \qquad
%
\infer{\tjudge{s}{\envcombine{\Gamma}{\Lambda}}{\apply{t}{u}{\typeQ}}{\typeP}}
{\tjudge{s}{\Gamma}{t}{\typemap{\typeQ}{\typeP}} & 
\tjudge{s}{\Lambda}{u}{\typeQ}}
\]

\subsubsection{Labelling and Label Projection.} The actions of a term $t$ may be
`tagged' with a label $\ell_0$ by forming the term $\linj{\ell_0}{t}$.
%
The effect of the term former $\lproj{\ell_0}{}$ is that terms of the form
$\lproj{\ell_0}{t}$ can perform only the actions of $t$ that are tagged by the
label $\ell_0$.
%
In both of these rules, the support of $\ell_0$ must be contained in $s$.
\[
\infer
{\tjudge{s}{\Gamma}{\linj{\ell_0}{t}}{\stdtypesum}}
{\tjudge{s}{\Gamma}{t}{\typePsub{\ell_0}} }  \qquad
%
\infer
{\tjudge{s}{\Gamma}{\lproj{\ell_0}{t}}{\typePsub{\ell_0}} }
{\tjudge{s}{\Gamma}{t}{\stdtypesum}}
\]

\subsubsection{Nondeterministic Sum.} A term $\ndsum{i}{I}{t_i}$ nondeterministically
chooses one of its components, say the $i$th, and behaves as $t_i$.
%
The support of the mapping $i \mapsto \tjudge{s_i}{\Gamma}{t_i}{\typeP}$ must
be supported by $s$.
\[
\infer
{\tjudge{s}{\Gamma}{\ndsum{i}{I}{t_i}}{\typeP}}
{\tjudge{s_i}{\Gamma}{t_i}{\typeP} \qquad\text{each $i \in I$}}
\]

\subsubsection{Recursive Type Folding and Unfolding.} As the
recursively-defined type $\typerec{j}{P}{\typeP}$ is isomorphic (and not equal)
to its unfolding $\typeP_j[\typerec{}{P}{\typeP}/\vec{P}]$ it is necessary to
record any uses of the isomorphism $\mathbf{abs} = \mathbf{rep}^{-1}$ in the
syntax of the term.
\[
\infer
{\tjudge{s}{\Gamma}{\abs t}{\typerec{j}{P}{\typeP} }}
{\tjudge{s}{\Gamma}{t}{\typeP_j[\typerec{}{P}{\typeP}/\vec{P}]}} \qquad
%
\infer
{\tjudge{s}{\Gamma}{\rep t}{\typeP_j[\typerec{}{P}{\typeP}/\vec{P}]}}
{\tjudge{s}{\Gamma}{t}{\typerec{j}{P}{\typeP} }}
\]

\subsubsection{Name Abstraction and Application.} The only alteration to the
syntax of terms over that of conventional HOPLA is the following pair of term
formers.
%
Intuitively the term $\new{a}{t}$ can perform the same actions as $t$ with the
name $a$ bound, whereas the term $\newapply{t}{a}$ takes the outputs of $t$,
which contain a bound name since $t$ is of type $\typedelta\typeP$, and unbinds
that name to $a$.
\[
\infer[(a \notin s)]
{\tjudge{s}{\Gamma}{\new{a}{t}}{\typedelta \typeP}}
{\tjudge{s \udot \{a\}}{\envfresh{\Gamma}{a}}{t}{\typeP}} \qquad
%
\infer[(a \notin s)]
{\tjudge{s \udot \{a\}}{\envfresh{\Gamma}{a}}{\newapply{t}{a}}{\typeP}}
{\tjudge{s}{\Gamma}{t}{\typedelta \typeP}}
\]


\vfill\pagebreak

The typing rules are directed by the syntax of terms, so that it is sometimes
possible to derive information about the type of subterms from the type of a
term.  The structural rules make this difficult to do in general, but for the
purposes of this discussion it will be enough to be able to derive type
information about subterms of a closed term.

\TODO{Don't seem to need all of these cases - can they be rationalised? They are
used in the opsem.}

\begin{lemma} 
\label{closedtermtypebackwards}
If the conclusion of a non-structural typing rule for a closed term is
derivable then so are its premises, in a sense made precise below.
\begin{enumerate}[(i)]
%
\item \label{closedtermtypebackwardsbang}
If $\tjudge{s}{}{\bang{t}}{\typelift\typeP}$ then
$\tjudge{s}{}{t}{\typeP}$.
%
\item \label{closedtermtypebackwardsrec}
If $\tjudge{s}{}{\rec{x}{t}}{\typeP}$ then
$\tjudge{s}{\envvarfresh{x}{\typeP}{\varnothing}}{t}{\typeP}$.
%
\item \label{closedtermtypebackwardsmatch}
If $\tjudge{s}{}{\matchz{s'}{u}{q}{x}{t}{\typeQp}}{\typeP}$ then $s' \subseteq
s$ and there exists $\typeQ$ and $s'' \subseteq s \setminus s'$ such that
$\tjudge{s}{\envvarfresh{x}{\typeQp}{s'} }{t}{\typeP}$,
$\tjudge{s''}{}{u}{\typeQ}$ and $\atjudge{s''}{\typeQ}{q}{\typeQp}$.
%
\item \label{closedtermtypebackwardsabstract}
If $\tjudge{s}{}{\abstract{x}{t}}{\typemap{\typeQ}{\typeP} }$ then
$\tjudge{s}{\envvarfresh{x}{\typeQ}{\varnothing} }{t}{\typeP}$.
%
\item \label{closedtermtypebackwardsapply}
If $\tjudge{s}{}{\apply{t}{u}{\typeQ}}{\typeP}$ then
$\tjudge{s}{}{t}{\typemap{\typeQ}{\typeP}}$ and $\tjudge{s}{}{u}{\typeQ}$.
%
\item \label{closedtermtypebackwardsnew}
If $\tjudge{s}{}{\new{a}{t}}{\typedelta \typeP}$ and $a \notin s$
then $\tjudge{s \udot \{a\}}{}{t}{\typeP}$.
%
\item \label{closedtermtypebackwardsnewapply}
If $\tjudge{s}{}{\newapply{t}{a}}{\typeP}$ then $a \in s$ and
$\tjudge{s \setminus \{a\}}{}{t}{\typedelta \typeP}$.
%
\item \label{closedtermtypebackwardslinj}
If $\tjudge{s}{}{\linj{\ell_0}{t}}{\stdtypesum}$ then
$\tjudge{s}{}{t}{\typePsub{\ell_0}}$.
%
\item \label{closedtermtypebackwardslproj}
If $\tjudge{s}{}{\lproj{\ell_0}{t}}{\typePsub{\ell_0}} $ then
$\tjudge{s}{}{t}{\stdtypesum}$.
%
\item \label{closedtermtypebackwardsndsum}
If $\tjudge{s}{}{\ndsum{i}{I}{t_i}}{\typeP}$ then for each $i \in I$
there exists $s_i$ such that $\tjudge{s_i}{}{t_i}{\typeP}$, and such that the
mapping $i \mapsto (s_i, t_i)$ is supported by $s$.
%
\item \label{closedtermtypebackwardsabs}
If $\tjudge{s}{}{\abs t}{\typerec{j}{P}{\typeP} }$ then 
$\tjudge{s}{}{t}{\typeP_j[\typerec{}{P}{\typeP}/\vec{P}]}$.
%
\item \label{closedtermtypebackwardsrep}
If $\tjudge{s}{}{\rep t}{\typeP_j[\typerec{}{P}{\typeP}/\vec{P}]}$
then $\tjudge{s}{}{t}{\typerec{j}{P}{\typeP} }$.
%
\end{enumerate}
\end{lemma}

\begin{proof} Each statement in this lemma is of the form ``If $C$ then
\ldots'' where $C$ is some typing judgement. Consider the last steps of the
derivation of $C$. By inspection, each $C$ can arise from at most one
non-structural rule, and each $C$ has empty environment so $C$ can arise from
the support-weakening rule but no other structural rule concludes with an empty
environment.  Therefore the derivation of $C$ must finish with the appropriate
non-structural rule followed by some number of applications of the
support-weakening rule. However, the support-weakening rule is transitive and
reflexive, so the $C$ may be derived by a sequence of rules finishing with the
appropriate non-structural rule followed by exactly one application of the
support-weakening rule, say one which extends the support from $s_1$ to $s_2 \supseteq s_1$.

The result follows immediately for cases (\ref{closedtermtypebackwardsbang}),
(\ref{closedtermtypebackwardsrec}), (\ref{closedtermtypebackwardsabstract}),
(\ref{closedtermtypebackwardsapply}), (\ref{closedtermtypebackwardslinj}),
(\ref{closedtermtypebackwardslproj}), (\ref{closedtermtypebackwardsabs}) and
(\ref{closedtermtypebackwardsrep}) since the non-structural rule in each of these
cases preserves the support, so if it is valid at support $s_1$ then it remains
valid at $s_2$. For case (\ref{closedtermtypebackwardsmatch}) the result follows
similarly, since $s' \subseteq s_1$ so that if $s'' \subseteq s_1 \setminus s'$
then $s'' \subseteq s_2 \setminus s'$. Case (\ref{closedtermtypebackwardsndsum})
is immediate too, since this case does not depend on the support of $C$.

For case (\ref{closedtermtypebackwardsnew}) if $a$ is fresh for $s_2$ then it is
certainly fresh for $s_1$, so this case follows. Finally, for case
(\ref{closedtermtypebackwardsnewapply}) by considering the structure of the
derivation it must be that $a \in s_1$ so that $s_1 \setminus \{a\} \subseteq
s_2 \setminus \{a\}$ and $\tjudge{s_1 \setminus \{a\}}{}{t}{\typedelta\typeP}$,
so that $\tjudge{s_2 \setminus \{a\}}{}{t}{\typedelta\typeP}$ as required.
\end{proof}

\subsection{Typing Rules for Actions}

Actions are typed with judgements of the form $\atjudge{s}{\typeP}{p}{\typePp}$
where $s$ is a finite set of names and $\typeP$ and $\typePp$ are types.
Intuitively this means that $p$ is an action that terms of type $\typeP$ may
perform and the resumption will be of type $\typePp$. As with typing
judgements for terms the set $s$ helps with the presentation of the associated
denotational semantics and lemma \ref{typerestrictsupport} shows that, if
omitted, a suitable $s$ may be inferred from the rest of the typing judgement.

\subsubsection{Support-Weakening (Actions)} It is possible to extend the
`current' set $s$ of names.
\[
\infer[(s' \subseteq s)]
{\atjudge{s}{\typeP}{p}{\typePp}}
{\atjudge{s'}{\typeP}{p}{\typePp}}
\]

\subsubsection{Prefix Action.} The resumption of a process of type $\typelift\typeP$
after performing a $\bangaction$ action is $\typeP$.
\[
\infer
{\atjudge{\varnothing}{\typelift\typeP}{\bangaction}{\typeP}}
{-}
\]

\subsubsection{Higher-Order Action.}
A process $t$ of type $\typemap{\typeQ}{\typeP}$ can perform the action $\mapaction{u}{p}$
if the application of $t$ to $u$ can perform the action $p$.
\[
\infer
{\atjudge{s}{\typemap{\typeQ}{\typeP}}{\mapaction{u}{p}}{\typePp}}
{\atjudge{s}{\typeP}{p}{\typePp} & \tjudge{s}{}{u}{\typeQ}}
\]

\subsubsection{Labelled Action.} Actions may be labelled as follows.
%
As with the corresponding typing rules for terms, the support of $\ell_0$ must
be contained in $s$.
\[
\infer
{\atjudge{s}{\stdtypesum}{\labelaction{\ell_0}{p}}{\typePp}}
{\atjudge{s}{\typePsub{\ell_0}}{p}{\typePp}}
\]

\subsubsection{Recursive Type Action.} As the recursively-defined type
$\typerec{j}{P}{\typeP}$ is isomorphic (and not equal) to its unfolding
$\typeP_j[\typerec{}{P}{\typeP}/\vec{P}]$ it is necessary to decorate actions
in the unfolded type with the tag $\mathbf{abs}$ to record the use of the
isomorphism $\mathbf{abs} = \mathbf{rep}^{-1}$.
\[
\infer
{\atjudge{s}{\typerec{j}{P}{\typeP}}{\absaction{p}}{\typePp}}
{\atjudge{s}{\typeP_j[\typerec{}{P}{\typeP}/\vec{P}]}{p}{\typePp}}
\]

\subsubsection{New Name Action.} An action $p$ may have the name $a$ `bound' in
it to form the action $\newaction{a}{p}$.
%
Notice that the type of the resumption is $\typedelta\typePp$: if the name $a$
is bound in a term then it remains bound in its resumption.
\[
\infer[(a \notin s)]
{\atjudge{s}{\typedelta\typeP}{\newaction{a}{p}}{\typedelta\typePp}}
{\atjudge{s \udot \{a\}}{\typeP}{p}{\typePp}}
\]

This concludes the definition of the type system for actions.
%
As is the case for terms, it is possible to use the type system for actions
`backwards' in the following semse.

\begin{lemma} 
\label{closedactiontypebackwards}
If the conclusion of a non-structural typing rule for an action is
derivable then so are its premises, in a sense made precise below.
\begin{enumerate}[(i)]
%
\item \label{closedactiontypebackwardsmap}
If $\atjudge{s}{\typemap{\typeQ}{\typeP}}{\mapaction{u}{p}}{\typePp}$ then
$\tjudge{s}{}{u}{\typeQ}$ and $\atjudge{s}{\typeP}{p}{\typePp}$.
%
\item \label{closedactiontypebackwardsnew}
If $\atjudge{s}{\typedelta\typeP}{\newaction{a}{p}}{\typedelta\typePp}$ and $a
\notin s$ then $\atjudge{s \udot \{a\}}{\typeP}{p}{\typePp}$.
%
\item \label{closedactiontypebackwardslabel}
If $\atjudge{s}{\stdtypesum}{\labelaction{\ell_0}{p}}{\typePp}$ then
$\atjudge{s}{\typePsub{\ell_0}}{p}{\typePp}$.
%
\item \label{closedactiontypebackwardsabs}
If $\atjudge{s}{\typerec{j}{P}{\typeP} }{\absaction p}{\typePp}$ then 
$\atjudge{s}{\typeP_j[\typerec{}{P}{\typeP}/\vec{P}]}{p}{\typePp}$.
%
\end{enumerate}
\end{lemma}

\begin{proof} Each statement in this lemma is of the form ``If $C$ then
\ldots'' where $C$ is some typing judgement. Consider the last steps of the
derivation of $C$. By inspection, each $C$ can arise from at most one
non-structural rule, or from the support-weakening rule, so the derivation of $C$ must finish with the appropriate
non-structural rule followed by some number of applications of the
support-weakening rule. However, the support-weakening rule is transitive and
reflexive, so the $C$ may be derived by a sequence of rules finishing with the
appropriate non-structural rule followed by exactly one application of the
support-weakening rule, say one which extends the support from $s_1$ to $s_2 \supseteq s_1$.

The result follows immediately for cases (\ref{closedactiontypebackwardsmap}),
(\ref{closedactiontypebackwardslabel}) and (\ref{closedactiontypebackwardsabs})
since the non-structural rule in each of these cases preserves the support, so
if it is valid at support $s_1$ then it remains valid at $s_2$. For case
(\ref{closedactiontypebackwardsnew}) if $a$ is fresh for $s_2$ then it is
certainly fresh for $s_1$, so this case follows.\end{proof}

\begin{lemma}[Equivariance of Typing] For all permutations $\sigma$,
\begin{enumerate}[(a)]
%
\item If $\tjudge{s}{\Gamma}{t}{\typeP}$ then $\tjudge{(\sigma \cdot
s)}{(\sigma \cdot \Gamma)}{(\sigma \cdot t)}{\typeP}$.
%
\item If $\atjudge{s}{\typeP}{p}{\typePp}$ then $\atjudge{(\sigma \cdot
s)}{\typeP}{(\sigma \cdot p)}{\typePp}$.
%
\end{enumerate}\end{lemma} \begin{proof}By a straightforward induction over the
derivations of the judgements $\tjudge{s}{\Gamma}{t}{\typeP}$ and
$\atjudge{s}{\typeP}{p}{\typePp}$.  \end{proof}

\vfill\pagebreak

\begin{lemma}\label{typerestrictsupport} If the current set $s$ of names is
omitted in a typing judgement then a suitable $s$ can be deduced from the syntax
of the typing judgement:
\begin{enumerate}[(a)]
%
\item If $\tjudge{s}{\Gamma}{t}{\typeP}$ then
$\tjudge{\supp{t}}{\envrestrict{\Gamma}{\supp t}}{t}{\typeP}$.
%
\item If $\atjudge{s}{\typeP}{p}{\typePp}$ then
$\atjudge{\supp{p}}{\typeP}{p}{\typePp}$.
%
\end{enumerate} \end{lemma}

\begin{proof} The proof is by mutual induction on the derivations of
$\tjudge{s}{\Gamma}{t}{\typeP}$ and $\atjudge{s}{\typeP}{p}{\typePp}$.
%
The proof is straightfoward with the exception of the case for terms of the
form $\ndsum{i}{I}{t_i}$.

\subparagraph{Variable} Trivially, since $\supp{\termvar{x}} = \varnothing$.

\subparagraph{Weakening} Suppose that
$\tjudge{s}{\envcombine{\Gamma}{\envvarfresh{x}{\typeQ}{\varnothing}
}}{t}{\typeP}$ is derived from $\tjudge{s}{\Gamma}{t}{\typeP}$, then by
induction $\tjudge{\supp{t}}{\envrestrict{\Gamma}{\supp{t}}}{t}{\typeP}$ and
hence $\tjudge{\supp{t}}{\envcombine{\envrestrict{\Gamma}{\supp{t}}}
{\envvarfresh{x}{\typeQ}{\varnothing} }}{t}{\typeP}$ as required.

\subparagraph{Exchange} This case follows by a straightforward application of the
induction hypothesis, similarly to the case of weakening above.

\subparagraph{Contraction} 
This case follows by a straightforward application of the
induction hypothesis, similarly to the case of weakening above.

\subparagraph{Fresh-Weakening} Suppose that
$\tjudge{s}{\envcombine{\Gamma}{\envvarfresh{x}{\typeQ}{s'} }}{t}{\typeP}$ is
derived from the judgement
$\tjudge{s}{\envcombine{\Gamma}{\envvarfresh{x}{\typeQ}{s''} }}{t}{\typeP}$
where $s'' \subseteq s' \subseteq s$, then by induction it follows that
$\tjudge{\supp{t}}{\envcombine{\envrestrict{\Gamma}{\supp{t}}}{\envvarfresh{x}{\typeQ}{s''
\cap \supp{t}} }}{t}{\typeP}$ and hence by fresh-weakening
$\tjudge{\supp{t}}{\envcombine{\envrestrict{\Gamma}{\supp{t}}}{\envvarfresh{x}{\typeQ}{s'
\cap \supp{t}} }}{t}{\typeP}$ as required.

\subparagraph{Support-Weakening (Terms)} If $\tjudge{s}{\Gamma}{t}{\typeP}$ is derived
from $\tjudge{s'}{\Gamma}{t}{\typeP}$ then by induction
$\tjudge{\supp{t}}{\envrestrict{\Gamma}{\supp{t}}}{t}{\typeP}$ as required.

\subparagraph{Prefix}
Suppose that $\tjudge{s}{\Gamma}{\bang{t}}{\typelift\typeP}$ is derived from $\tjudge{s}{\Gamma}{t}{\typeP}$,
then by induction $\tjudge{\supp{t}}{\envrestrict{\Gamma}{\supp{t}}}{t}{\typeP}$, and $\supp{\bang{t}} = \supp{t}$
so that $\tjudge{\supp{\bang{t}}}{\envrestrict{\Gamma}{\supp{\bang{t}}}}{\bang{t}}{\typelift\typeP}$ as required.

\subparagraph{Recursion} Suppose that $\tjudge{s}{\Gamma}{\rec{x}{t}}{\typeP}$ is
derived from
$\tjudge{s}{\envcombine{\Gamma}{\envvarfresh{x}{\typeP}{\varnothing}
}}{t}{\typeP}$, then by induction
$\tjudge{\supp{t}}{\envcombine{\envrestrict{\Gamma}{\supp{t}}}{\envvarfresh{x}{\typeP}{\varnothing}
}}{t}{\typeP}$, and $\supp{\rec{x}{t}} = \supp{t}$ so that
$\tjudge{\supp{\rec{x}{t}}}{\envrestrict{\Gamma}{\supp{\rec{x}{t}}}}{\rec{x}{t}}{\typeP}$
as required.

\subparagraph{Prefix-Match} Suppose that
$\tjudge{s}{\envcombine{\Gamma}{\envfresh{\Lambda}{s'} }}
{\matchz{s'}{u}{q}{x}{t}{\typeQp}}{\typeP}$ is derived from
\[\tjudge{s}{\envcombine{\Gamma}{\envvarfresh{x}{\typeQp}{s'} }}{t}{\typeP}, \quad
\tjudge{s''}{\Lambda}{u}{\typeQ} \quad \text{and} \quad \atjudge{s''}{\typeQ}{q}{\typeQp}\]
where $s'' \subseteq s \setminus s'$, then by induction
\[\begin{array}{l}
\tjudge{\supp{t}}{\envcombine{\envrestrict{\Gamma}{\supp{t}}}{\envvarfresh{x}{\typeQp}{s'
\cap \supp{t}} }}{t}{\typeP}, \\
\tjudge{\supp{u}}{\envrestrict{\Lambda}{\supp{u}}}{u}{\typeQ} \quad\text{and}\quad
\atjudge{\supp{q}}{\typeQ}{q}{\typeQp}. \end{array}\]
Notice that $\supp{\matchz{s'}{u}{q}{x}{t}{\typeQp}} = \supp{u,q,t,s'}$.
By fresh-weakening and support-weakening it follows that
\[\begin{array}{l}
\tjudge{\supp{u,q,t,s'}}{\envcombine{\envrestrict{\Gamma}{\supp{u,q,t,s'}}}{\envvarfresh{x}{\typeQp}{s'}
}}{t}{\typeP}, \\
\tjudge{\supp{u,q}}{\envrestrict{\Lambda}{\supp{u}}}{u}{\typeQ} \quad\text{and}\quad
\atjudge{\supp{u,q}}{\typeQ}{q}{\typeQp}.\end{array}\]
Also, $\supp{u,q} \subseteq s'' \cap \supp{u,q,t,s'}
\subseteq \supp{u,q,t,s'} \setminus s'$
so that
\[\tjudge{\supp{u,q,t,s'}}{\envcombine{\envrestrict{\Gamma}{\supp{u,q,t,s'}}}
{\envfresh{\envrestrict{\Lambda}{\supp{u}}}{s'} }}
{\matchz{s'}{u}{q}{x}{t}{\typeQp}}{\typeP}\]
and hence
\[\tjudge{\supp{u,q,t,s'}}{\envcombine{\envrestrict{\Gamma}{\supp{u,q,t,s'}}}
{\envfresh{\envrestrict{\Lambda}{\supp{u,q,t,s'}}}{s'} }}
{\matchz{s'}{u}{q}{x}{t}{\typeQp}}{\typeP}\]
by fresh-weakening as required.

\subparagraph{Function Abstraction} Suppose that
$\tjudge{s}{\Gamma}{\abstract{x}{t}}{\typemap{\typeQ}{\typeP} }$ is derived
from $\tjudge{s}{\envcombine{\Gamma}{\envvarfresh{x}{\typeQ}{\varnothing}
}}{t}{\typeP}$, then by induction
$\tjudge{\supp{t}}{\envcombine{\envrestrict{\Gamma}{\supp{t}}}{\envvarfresh{x}{\typeQ}{\varnothing}
}}{t}{\typeP}$, and also $\supp{\abstract{x}{t}} = \supp{t}$ so that
$\tjudge{\supp{\abstract{x}{t}}}{\envrestrict{\Gamma}{\supp{\abstract{x}{t}}}}
{\abstract{x}{t}}{\typemap{\typeQ}{\typeP} }$ as required.

\subparagraph{Function Application}
Suppose that $\tjudge{s}{\envcombine{\Gamma}{\Lambda}}{\apply{t}{u}{\typeQ}}{\typeP}$
is derived from the judgements $\tjudge{s}{\Gamma}{t}{\typemap{\typeQ}{\typeP}}$ and $\tjudge{s}{\Lambda}{u}{\typeQ}$,
then by induction followed by support-weakening and fresh-weakening
$\tjudge{\supp{t,u}}{\envrestrict{\Gamma}{\supp{t,u}}}{t}{\typemap{\typeQ}{\typeP}}$
and $\tjudge{\supp{t,u}}{\envrestrict{\Lambda}{\supp{t,u}}}{u}{\typeQ}$, and $\supp{\apply{t}{u}{\typeQ}} =
\supp{t,u}$ so it follows that $\tjudge{\supp{\apply{t}{u}{\typeQ}}}
{\envcombine{\envrestrict{\Gamma}{\supp{t,u}}}{\envrestrict{\Lambda}{\supp{t,u}}}}{\apply{t}{u}{\typeQ}}{\typeP}$ as required.

\subparagraph{Name Abstraction} Suppose that
$\tjudge{s}{\Gamma}{\new{a}{t}}{\typedelta \typeP}$ is derived from the judgement $\tjudge{s
\udot \{a\}}{\envfresh{\Gamma}{a}}{t}{\typeP}$ where $a$ is fresh, then by
induction and support-weakening $\tjudge{\supp{t} \cup
\{a\}}{\envrestrict{\envfresh{\Gamma}{a}}{\supp{t}}}{t}{\typeP}$, and $\supp{\new{a}{t}} = \supp{t}
\setminus \{a\}$ so that $\tjudge{\supp{t} \setminus
\{a\}}{\envrestrict{\Gamma}{\supp{t} \setminus \{a\}}}{\new{a}{t}}{\typeP}$ as required.

\subparagraph{Name Application} Suppose that
$\tjudge{s \udot \{a\}}{\envfresh{\Gamma}{a}}{\newapply{t}{a}}{\typeP}$ is
derived from the judgement $\tjudge{s}{\Gamma}{t}{\typedelta \typeP}$ and $a
\notin s$, then by induction
$\tjudge{\supp{t}}{\envrestrict{\Gamma}{\supp{t}}}{t}{\typedelta\typeP}$,
and $\supp{\newapply{t}{a}} = \supp{t} \udot \{a\}$, so that
$\tjudge{\supp{\newapply{t}{a}}}{\envrestrict{\envfresh{\Gamma}{a}}{\supp{\newapply{t}{a}}}}{\newapply{t}{a}}{\typeP}$
as required.


\subparagraph{Labelling} Suppose that
$\tjudge{s}{\Gamma}{\linj{\ell_0}{t}}{\stdtypesum}$ is derived from
$\tjudge{s}{\Gamma}{t}{\typePsub{\ell_0}}$, then by induction followed by
support-weakening and freshness-weakening
it follows that $\tjudge{\supp{t,\ell_0}}{\envrestrict{\Gamma}{\supp{t,\ell_0}}}{t}{\typePsub{\ell_0}}$
and $\supp{\linj{\ell_0}{t}} = \supp{t,\ell_0}$ so that
$\tjudge{\supp{t,\ell_0}}{\envrestrict{\Gamma}{\supp{t,\ell_0}}}{\linj{\ell_0}{t}}{\stdtypesum}$
as required.


\subparagraph{Label Projection} Suppose that
$\tjudge{s}{\Gamma}{\lproj{\ell_0}{t}}{\typePsub{\ell_0}}$ is derived from
the judgement $\tjudge{s}{\Gamma}{t}{\stdtypesum}$, then by induction followed by
support-weakening and freshness-weakening
$\tjudge{\supp{t,\ell_0}}{\envrestrict{\Gamma}{\supp{t,\ell_0}}}{t}{\stdtypesum}$.
Also $\supp{\lproj{\ell_0}{t}} = \supp{t,\ell_0}$ so that
$\tjudge{\supp{t,\ell_0}}{\envrestrict{\Gamma}{\supp{t,\ell_0}}}{\lproj{\ell_0}{t}}{\typePsub{\ell_0}}$
as required.


\subparagraph{Nondeterministic Sum} Suppose that
$\tjudge{s}{\Gamma}{\ndsum{i}{I}{t_i}}{\typeP}$ is derived from the judgements
$\tjudge{s_i}{\Gamma}{t_i}{\typeP}$ for all $i \in I$.  Therefore by induction
for each $i \in I$ it follows that
$\tjudge{\supp{t_i}}{\envrestrict{\Gamma}{\supp{t_i}}}{t_i}{\typeP}$. Let $i
\in I$. Enumerate the names in $(\supp{i} \cap \supp{\Gamma}) \setminus
\supp{\lambda i. t_i}$ as $a_1, \ldots, a_n$, let $b_1, \ldots, b_n$ be fresh
and let $\pi = (a_1 b_1) \ldots (a_n b_n)$. Since the $a_j$ and $b_j$ are fresh
for $\lambda i. t_i$, it follows that $\pi \cdot t_i = t_{\pi \cdot i}$. Since
typing is equivariant, $\tjudge{\supp{t_i}}{\pi^{-1} \cdot
\bigl(\envrestrict{\Gamma}{\supp{t_{\pi \cdot i}}}\bigr)}{t_i}{\typeP}$.
Suppose that the freshness assumption $\termvar{x} \freshfor a$ is in the
environment $\pi^{-1} \cdot \bigl(\envrestrict{\Gamma}{\supp{t_{\pi \cdot
i}}}\bigr)$, then $\termvar{x} \freshfor (\pi \cdot a)$ is in
$\envrestrict{\Gamma}{\supp{t_{\pi \cdot i}}}$ and hence in $\Gamma$ and
furthermore $\pi \cdot a \in \supp{t_{\pi \cdot i}}$ so that finally $a \in
\supp{t_i} \subseteq \supp{i} \cup \supp{\lambda i.  t_i}$.  If $a \in
\supp{\lambda i. t_i}$ then $\pi \cdot a = a$ and $\termvar{x} \freshfor a$ is
in $\envrestrict{\Gamma}{\supp{\lambda i. t_i}}$.

On the other hand, suppose that $a \in \supp{i} \setminus \supp{\lambda i.
t_i}$.  Recall that $\termvar{x} \freshfor (\pi \cdot a)$ is a freshness
assumption of $\Gamma$ and hence that $\pi \cdot a \in \supp{\Gamma}$.  It
cannot be that $a = a_j$ for some $j$, because then $\pi \cdot a = b_j$ and the
$b_j$ were chosen fresh for $\Gamma$. Nor can it be that $a = b_j$ for some
$j$, because $a \in \supp{i}$ and the $b_j$ were chosen fresh for $i$. Finally,
it cannot be that $\pi \cdot a = a$, because then $a \in \supp{\Gamma}$ and
hence $a = a_j$ for some $j$, which has already been shown impossible.
Therefore $a \notin \supp{i} \setminus \supp{\lambda i. t_i}$, so that $a \in
\supp{\lambda i. t_i}$ and hence $\termvar{x} \freshfor a$ is in
$\envrestrict{\Gamma}{\supp{\lambda i. t_i}}$.

Therefore, starting from $\tjudge{\supp{t_i}}{\pi^{-1} \cdot
\bigl(\envrestrict{\Gamma}{\supp{t_{\pi \cdot i}}}\bigr)}{t_i}{\typeP}$ it is
possible to apply fresh-weakening to conclude that
$\tjudge{\supp{t_i}}{\envrestrict{\Gamma}{\supp{\lambda i.
t_i}}}{t_i}{\typeP}$ for each $i$, and hence
$\tjudge{\supp{\lambda i. t_i}}{\envrestrict{\Gamma}{\supp{\lambda i.
t_i}}}{\ndsum{i}{I}{t_i}}{\typeP}$.


\subparagraph{Recursive Type Folding}
Suppose that $\tjudge{s}{\Gamma}{\abs t}{\typerec{j}{P}{\typeP} }$
is derived from $\tjudge{s}{\Gamma}{t}{\typeP_j[\typerec{}{P}{\typeP}/\vec{P}]}$
then by induction 
$\tjudge{\supp{t}}{\envrestrict{\Gamma}{\supp{t}}}{t}{\typeP_j[\typerec{}{P}{\typeP}/\vec{P}]}$
and $\supp{\abs t} = \supp{t}$ so that 
$\tjudge{\supp{\abs t}}{\envrestrict{\Gamma}{\supp{\abs t}}}{\abs t}{\typerec{j}{P}{\typeP} }$
as required.


\subparagraph{Recursive Type Unfolding}
Suppose that $\tjudge{s}{\Gamma}{\rep t}{\typeP_j[\typerec{}{P}{\typeP}/\vec{P}]}$
is derived from $\tjudge{s}{\Gamma}{t}{\typerec{j}{P}{\typeP} }$
then by induction 
$\tjudge{\supp{t}}{\envrestrict{\Gamma}{\supp{t}}}{t}{\typerec{j}{P}{\typeP} }$
and $\supp{\rep t} = \supp t$ so that
$\tjudge{\supp{\rep t}}{\envrestrict{\Gamma}{\supp{\rep t}}}{\rep t}{\typeP_j[\typerec{}{P}{\typeP}/\vec{P}]}$
as required.

\subparagraph{Prefix Action} Trivially, since $\supp{\bangaction} = \varnothing$.

\subparagraph{Higher-Order Action} Suppose that
$\atjudge{s}{\typemap{\typeQ}{\typeP}}{\mapaction{u}{p}}{\typePp}$ is derived
from $\atjudge{s}{\typeP}{p}{\typePp}$ and $\tjudge{s}{}{u}{\typeQ}$, then by
induction and support-weakening $\atjudge{\supp{u,p}}{\typeP}{p}{\typePp}$ and
$\tjudge{\supp{u,p}}{}{u}{\typeQ}$. Also $\supp{\mapaction{u}{p}} = \supp{u,p}$
so that
$\atjudge{\supp{u,p}}{\typemap{\typeQ}{\typeP}}{\mapaction{u}{p}}{\typePp}$ as
required.

\subparagraph{Labelled Action} Suppose that
$\atjudge{s}{\stdtypesum}{\labelaction{\ell_0}{p}}{\typePp}$ is derived from
$\atjudge{s}{\typePsub{\ell_0}}{p}{\typePp}$, then by induction and
support-weakening $\atjudge{\supp{p, \ell_0}}{\typePsub{\ell_0}}{p}{\typePp}$.
Also $\supp{\labelaction{\ell_0}{p}} = \supp{p, \ell_0}$ so that
$\atjudge{\supp{p, \ell_0}}{\stdtypesum}{\labelaction{\ell_0}{p}}{\typePp}$ as
required.

\subparagraph{New Name Action} Suppose that
$\atjudge{s}{\typedelta\typeP}{\newaction{a}{p}}{\typedelta\typePp}$ is derived
from $\atjudge{s \udot \{a\}}{\typeP}{p}{\typePp}$, then by induction and
support-weakening $\atjudge{\supp{p} \cup \{a\}}{\typeP}{p}{\typePp}$. Also
$\supp{\newaction{a}{p}} = \supp{p} \setminus \{a\}$ so that $\atjudge{\supp{p}
\setminus \{a\}}{\typedelta\typeP}{\newaction{a}{p}}{\typePp}$ as required.

\subparagraph{Recursive Type Action}
Suppose that $\atjudge{s}{\typerec{j}{P}{\typeP}}{\absaction{p}}{\typePp}$
is derived from $\atjudge{s}{\typeP_j[\typerec{}{P}{\typeP}/\vec{P}]}{p}{\typePp}$,
then by induction 
$\atjudge{\supp{p}}{\typeP_j[\typerec{}{P}{\typeP}/\vec{P}]}{p}{\typePp}$
and $\supp{\absaction{p}} = \supp{p}$ so that
$\atjudge{\supp{p}}{\typerec{j}{P}{\typeP} }{\abs p}{\typePp}$ as required.

\subparagraph{Support-Weakening (Actions)}

If $\atjudge{s}{\typeP}{p}{\typePp}$ is derived from
$\atjudge{s'}{\typeP}{p}{\typePp}$ then
$\atjudge{\supp{p}}{\typeP}{p}{\typePp}$ by induction as required.

\end{proof}

\begin{definition} In the light of the previous lemma, write
$\tjudge{}{\Gamma}{t}{\typeP}$ for $\tjudge{\supp{t}}{\Gamma}{t}{\typeP}$ and
$\atjudge{}{\typeP}{p}{\typePp}$ for $\atjudge{\supp{p}}{\typeP}{p}{\typePp}$.
\end{definition}


%\vfill\pagebreak

%\begin{lemma}[Well-defined] Typing is well-defined on equivalence-classes of pre-terms.
%\begin{enumerate}
%\item If $\tjudge{s}{\Gamma}{t}{\typeP}$ and $t$ and $t'$ are $\alpha$-equivalent then $\tjudge{s}{\Gamma}{t'}{\typeP}$.
%\item If $\atjudgex{s}{\typeP}{p}{\typePp}$ and $p$ and $p'$ are $\alpha$-equivalent then $\atjudgex{s}{\typeP}{p'}{\typePp}$.
%\end{enumerate}
%\end{lemma}

%\begin{proof}
%The proof is by induction on the derivation of the respective typing judgements.
%\end{proof}

\vfill\pagebreak

% vim: set filetype=tex foldlevel=0 cms=\%%s tw=0 nowrap:
